initSidebarItems({"derive":[["Metadata",""],["TypeDef",""],["TypeId",""]],"enum":[["Builtin","This struct just exists for the purpose of better JSON output."],["EnumVariant","A Rust enum variant."],["NamespaceError","An error that may be encountered upon constructing namespaces."],["TypeDef","A type definition represents the internal structure of a concrete type."],["TypeId","A type identifier."],["TypeIdPrimitive","Identifies a primitive Rust type."]],"macro":[["tuple_meta_type","Takes a number of types and returns a vector that contains their respective `MetaType` instances."]],"mod":[["form","Provides some form definitions."],["interner","Interning data structure and associated symbol definitions."]],"struct":[["ClikeEnumVariant","A C-like enum variant."],["EnumVariantStruct","A struct enum variant with named fields."],["EnumVariantTupleStruct","A tuple struct enum variant."],["EnumVariantUnit","An unit struct enum variant."],["MetaType","A metatype abstraction."],["NamedField","A named field."],["Namespace","Represents the namespace of a type definition."],["Registry","The registry for compaction of type identifiers and definitions."],["TypeDefClikeEnum","A C-like enum type."],["TypeDefEnum","A Rust enum, aka tagged union."],["TypeDefStruct","A Rust struct with named fields."],["TypeDefTupleStruct","A tuple struct with unnamed fields."],["TypeDefUnion","A union, aka untagged union, type definition."],["TypeIdArray","An array type identifier."],["TypeIdCustom","A type identifier for custom type definitions."],["TypeIdSlice","A type identifier to refer to slice type definitions."],["TypeIdTuple","A type identifier to refer to tuple types."],["UnnamedField","An unnamed field from either a tuple-struct type or a tuple-struct variant."]],"trait":[["HasTypeDef","Types implementing this trait can communicate their type structure."],["HasTypeId","Implementors return their meta type identifiers."],["IntoCompact","Compacts the implementor using a registry."],["Metadata","A super trait that shall be implemented by all types implementing `HasTypeId` and `HasTypedef` in order to more easily manage them."]]});