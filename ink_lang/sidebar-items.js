initSidebarItems({"attr":[["contract",""],["test",""],["trait_definition",""]],"enum":[["DispatchError","A dispatch error."],["DispatchMode","The contract dispatch mode."],["NeverReturns","The type that can never be returned because it is not possible to craft an instance of it."]],"fn":[["deny_payment","Returns `Ok` if the caller did not transfer additional value to the callee."],["execute_constructor","Executes the given constructor closure."],["execute_message","Executes the given `&self` message closure."],["execute_message_mut","Executes the given `&mut self` message closure."]],"struct":[["AcceptsPayments","Yields `true` if the message accepts payments."],["DispatchRetCode","A return code indicating success or error in a compact form."],["EnablesDynamicStorageAllocator","Yields `true` if the dynamic storage allocator is enabled for the given call."],["EnvAccess","A typed accessor to the environment."]],"trait":[["BaseEvent","Defines a base event type for the contract."],["CheckedInkTrait","Trait used to indicate that an ink! trait definition has been checked by the `#[ink::trait_definition]` proc. macro."],["Constructor","A dispatchable contract constructor message."],["ConstructorDispatcher","Connector trait: Connects enum dispatcher for constructors with the contract."],["ContractEnv","The environment of the compiled ink! smart contract."],["DispatchUsingMode","Trait implemented by contracts themselves in order to provide a clean interface for the C-ABI specified `call` and `create` functions to forward calls to."],["EmitEvent","Implemented by contracts in order to override `env().emit_event(..)` syntax for emitting of ink! contract events."],["Env","Simplifies interaction with the host environment via `self`."],["Execute","Connector trait used to start the execution of a smart contract."],["False","Predicate types that evaluate to `false`."],["FnInput","Dispatchable functions that have inputs."],["FnOutput","Dispatchable functions that have an output."],["FnSelector","The selector of dispatchable functions."],["FnState","The storage state that the dispatchable function acts on."],["ForwardCall","Implemented by contracts that are compiled as dependencies."],["ForwardCallMut","Implemented by contracts that are compiled as dependencies."],["ImpliesReturn","Trait used by `#[ink::trait_definition]` to ensure that the associated return type for each trait message is correct."],["MessageDispatcher","Connector trait: Connects enum dispatcher for messages with the contract."],["MessageMut","A `&mut self` dispatchable contract message."],["MessageRef","A `&self` dispatchable contract message."],["StaticEnv","Simplifies interaction with the host environment via `Self`."],["ToAccountId","Implemented by contracts that are compiled as dependencies."],["True","Predicate types that evaluate to `true`."]],"type":[["DispatchResult","A dispatch result."]]});