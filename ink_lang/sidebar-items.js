initSidebarItems({"attr":[["contract",""]],"enum":[["BuildPhase","Building phase of a contract construction."],["DispatchError","A dispatch error."],["DispatchMode","The contract dispatch mode."],["EmptyPhase","Phase to start the building process of a contract."],["FinalPhase","Final phase of a fully constructed contract."]],"struct":[["Contract","The contract definition."],["DispatchList","A list of dispatchers."],["DispatchRetCode","A return code indicating success or error in a compact form."],["EnvAccess","A typed accessor to the environment."],["MsgCon","A constructor contract message wrapper."],["MsgMut","A `&mut self` contract message wrapper."],["MsgRef","A `&self` contract message wrapper."],["Placeholder","Placeholder for the given type."],["UnreachableDispatcher","A dispatcher that shall never dispatch."]],"trait":[["BaseEvent","Defines a base event type for the contract."],["Constructor","A dispatchable contract constructor message."],["Dispatch","Types implementing this trait can handle contract calls."],["DispatchUsingMode","Trait implemented by contracts themselves in order to provide a clean interface for the C-ABI specified `call` and `create` functions to forward calls to."],["EmitEvent","Implemented by contracts in order to override `env().emit_event(..)` syntax for emitting of ink! contract events."],["Env","Simplifies interaction with the host environment via `self`."],["FnInput","Dispatchable functions that have inputs."],["FnOutput","Dispatchable functions that have an output."],["FnSelector","The selector of dispatchable functions."],["FnState","The storage state that the dispatchable function acts on."],["ForwardCall","Implemented by contracts that are compiled as dependencies."],["ForwardCallMut","Implemented by contracts that are compiled as dependencies."],["GenerateAbi","Types implementing this trait can generate their metadata."],["InstantiateTestable","Trait implemented by contracts to make them testable."],["MessageMut","A `&mut self` dispatchable contract message."],["MessageRef","A `&self` dispatchable contract message."],["PushDispatcher","Types able to push another dispatcher to themselves."],["StaticEnv","Simplifies interaction with the host environment via `Self`."],["ToAccountId","Implemented by contracts that are compiled as dependencies."]],"type":[["DispatchResult","A dispatch result."],["EmptyDispatchList","A simple type definition to view the single unreachable dispatcher as list."]]});