var searchIndex={};
searchIndex["ink_abi"] = {"doc":"","i":[[24,"HasLayout","ink_abi","",null,null],[3,"LayoutField","","The layout for a particular field of a struct layout.",null,null],[3,"LayoutKey","","A concrete range of keys.",null,null],[12,"0","","Internals must be compatible with `ink_primitives::Key`.",0,null],[3,"LayoutRange","","Direct range of associated storage keys.",null,null],[3,"LayoutStruct","","A struct storage layout.",null,null],[3,"ConstructorSpec","","Describes a constructor of a contract.",null,null],[3,"ConstructorSpecBuilder","","A builder for constructors.",null,null],[3,"ContractSpec","","Describes a contract.",null,null],[3,"ContractSpecBuilder","","A builder for contracts.",null,null],[3,"EventParamSpec","","Describes a pair of parameter name and type.",null,null],[3,"EventParamSpecBuilder","","Used to construct an event parameter specification.",null,null],[3,"EventSpec","","Describes an event definition.",null,null],[3,"EventSpecBuilder","","An event specification builder.",null,null],[3,"MessageParamSpec","","Describes a pair of parameter name and type.",null,null],[3,"MessageParamSpecBuilder","","Used to construct a message parameter specification.",null,null],[3,"MessageSpec","","Describes a contract message.",null,null],[3,"MessageSpecBuilder","","A builder for messages.",null,null],[3,"ReturnTypeSpec","","Describes the return type of a contract message.",null,null],[3,"TypeSpec","","A type specification.",null,null],[3,"InkProject","","An entire ink! project for ABI file generation purposes.",null,null],[4,"StorageLayout","","Either a concrete layout bound or another layout sub-struct.",null,null],[13,"Range","","A concrete layout bound.",1,null],[13,"Struct","","A nested sub-struct with layout bounds.",1,null],[11,"new","","Creates a new layout struct.",2,[[["f"]],["self"]]],[11,"new","","Creates a new layout field from the given name and…",3,[[["storagelayout"]],["self"]]],[11,"of","","Creates a new layout field for the given field instance.",3,[[["t"]],["self"]]],[11,"cell","","Creates a layout range representing a single cell.",4,[[["k"]],["self"]]],[11,"chunk","","Creates a layout range for a whole chunk starting at the…",4,[[["k"]],["self"]]],[11,"constructors","","Sets the constructors of the contract specification.",5,[[["c"]],[["valid"],["contractspecbuilder",["valid"]]]]],[11,"messages","","Sets the messages of the contract specification.",5,[[["m"]],["self"]]],[11,"events","","Sets the events of the contract specification.",5,[[["e"]],["self"]]],[11,"docs","","Sets the documentation of the contract specification.",5,[[["d"]],["self"]]],[11,"done","","Finalizes construction of the contract specification.",5,[[],["contractspec"]]],[11,"new","","Creates a new contract specification.",6,[[],["contractspecbuilder"]]],[11,"new","","Creates a new constructor spec builder.",7,[[],[["constructorspecbuilder",["missing"]],["missing",["selector"]]]]],[11,"selector","","Sets the function selector of the message.",8,[[],[["constructorspecbuilder",["selector"]],["selector"]]]],[11,"args","","Sets the input arguments of the message specification.",8,[[["a"]],["self"]]],[11,"docs","","Sets the documentation of the message specification.",8,[[["d"]],["self"]]],[11,"done","","Finishes construction of the constructor.",8,[[],["constructorspec"]]],[11,"new","","Creates a new message spec builder.",9,[[],[["missing",["selector"]],["missing",["mutates"]],["missing",["returns"]],["messagespecbuilder",["missing","missing","missing"]]]]],[11,"selector","","Sets the function selector of the message.",10,[[],[["selector"],["messagespecbuilder",["selector"]]]]],[11,"mutates","","Sets if the message is mutable, thus taking `&mut self` or…",10,[[["bool"]],[["messagespecbuilder",["mutates"]],["mutates"]]]],[11,"returns","","Sets the return type of the message.",10,[[["returntypespec"]],[["returns"],["messagespecbuilder",["returns"]]]]],[11,"args","","Sets the input arguments of the message specification.",10,[[["a"]],["self"]]],[11,"docs","","Sets the documentation of the message specification.",10,[[["d"]],["self"]]],[11,"done","","Finishes construction of the message.",10,[[],["messagespec"]]],[11,"args","","Sets the input arguments of the event specification.",11,[[["a"]],["self"]]],[11,"docs","","Sets the input arguments of the event specification.",11,[[["d"]],["self"]]],[11,"done","","Finalizes building the event specification.",11,[[],["eventspec"]]],[11,"new","","Creates a new event specification builder.",12,[[["str"]],["eventspecbuilder"]]],[11,"with_name_str","","Creates a new type specification with a display name.",13,[[["str"]],["self"]]],[11,"with_name_segs","","Creates a new type specification with a display name…",13,[[["s"]],["self"]]],[11,"new","","Creates a new type specification without a display name.",13,[[],["self"]]],[11,"new","","Creates a new event parameter specification builder.",14,[[["str"]],["eventparamspecbuilder"]]],[11,"of_type","","Sets the type of the event parameter.",15,[[["typespec"]],["self"]]],[11,"indexed","","If the event parameter is indexed.",15,[[["bool"]],["self"]]],[11,"docs","","Sets the documentation of the event parameter.",15,[[["d"]],["self"]]],[11,"done","","Finishes constructing the event parameter spec.",15,[[],["eventparamspec"]]],[11,"new","","Creates a new return type specification from the given…",16,[[["t"]],["self"]]],[11,"new","","Constructs a new message parameter specification via…",17,[[["str"]],["messageparamspecbuilder"]]],[11,"of_type","","Sets the type of the message parameter.",18,[[["typespec"]],["self"]]],[11,"done","","Finishes construction of the message parameter.",18,[[],["messageparamspec"]]],[6,"DisplayName","","Describes the syntactical name of a type at a given type…",null,null],[8,"HasLayout","","Implemented by types that have a storage layout.",null,null],[10,"layout","","",19,[[["self"]],["storagelayout"]]],[11,"new","","Creates a new ink! project.",20,[[["s"],["l"]],["self"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["key"]],["self"]]],[11,"from","","",1,[[["layoutstruct"]],["storagelayout"]]],[11,"from","","",1,[[["layoutrange"]],["storagelayout"]]],[11,"from","","",0,[[],["layoutkey"]]],[11,"eq","","",1,[[["storagelayout"],["self"]],["bool"]]],[11,"ne","","",1,[[["storagelayout"],["self"]],["bool"]]],[11,"eq","","",0,[[["layoutkey"],["self"]],["bool"]]],[11,"ne","","",0,[[["layoutkey"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["layoutstruct"]],["bool"]]],[11,"ne","","",2,[[["self"],["layoutstruct"]],["bool"]]],[11,"eq","","",3,[[["self"],["layoutfield"]],["bool"]]],[11,"ne","","",3,[[["self"],["layoutfield"]],["bool"]]],[11,"eq","","",4,[[["self"],["layoutrange"]],["bool"]]],[11,"ne","","",4,[[["self"],["layoutrange"]],["bool"]]],[11,"eq","","",6,[[["contractspec"],["self"]],["bool"]]],[11,"ne","","",6,[[["contractspec"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["constructorspec"]],["bool"]]],[11,"ne","","",7,[[["self"],["constructorspec"]],["bool"]]],[11,"eq","","",9,[[["self"],["messagespec"]],["bool"]]],[11,"ne","","",9,[[["self"],["messagespec"]],["bool"]]],[11,"eq","","",12,[[["eventspec"],["self"]],["bool"]]],[11,"ne","","",12,[[["eventspec"],["self"]],["bool"]]],[11,"eq","","",13,[[["typespec"],["self"]],["bool"]]],[11,"ne","","",13,[[["typespec"],["self"]],["bool"]]],[11,"eq","","",14,[[["self"],["eventparamspec"]],["bool"]]],[11,"ne","","",14,[[["self"],["eventparamspec"]],["bool"]]],[11,"eq","","",16,[[["returntypespec"],["self"]],["bool"]]],[11,"ne","","",16,[[["returntypespec"],["self"]],["bool"]]],[11,"eq","","",17,[[["self"],["messageparamspec"]],["bool"]]],[11,"ne","","",17,[[["self"],["messageparamspec"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","","",17,[[["self"],["__s"]],["result"]]],[11,"serialize","","",20,[[["self"],["__s"]],["result"]]],[11,"into_compact","","",1,[[["registry"]]]],[11,"into_compact","","",2,[[["registry"]]]],[11,"into_compact","","",3,[[["registry"]]]],[11,"into_compact","","",4,[[["registry"]]]],[11,"into_compact","","",6,[[["registry"]]]],[11,"into_compact","","",7,[[["registry"]]]],[11,"into_compact","","",9,[[["registry"]]]],[11,"into_compact","","",12,[[["registry"]]]],[11,"into_compact","","",13,[[["registry"]]]],[11,"into_compact","","",14,[[["registry"]]]],[11,"into_compact","","",16,[[["registry"]]]],[11,"into_compact","","",17,[[["registry"]]]]],"p":[[3,"LayoutKey"],[4,"StorageLayout"],[3,"LayoutStruct"],[3,"LayoutField"],[3,"LayoutRange"],[3,"ContractSpecBuilder"],[3,"ContractSpec"],[3,"ConstructorSpec"],[3,"ConstructorSpecBuilder"],[3,"MessageSpec"],[3,"MessageSpecBuilder"],[3,"EventSpecBuilder"],[3,"EventSpec"],[3,"TypeSpec"],[3,"EventParamSpec"],[3,"EventParamSpecBuilder"],[3,"ReturnTypeSpec"],[3,"MessageParamSpec"],[3,"MessageParamSpecBuilder"],[8,"HasLayout"],[3,"InkProject"]]};
searchIndex["ink_abi_derive"] = {"doc":"","i":[[24,"HasLayout","ink_abi_derive","",null,null]],"p":[]};
searchIndex["ink_core"] = {"doc":"The `ink_core` utilities used by all ink! smart contracts.","i":[[0,"env","ink_core","Environmental interface. (version 3)",null,null],[3,"AccountId","ink_core::env","The default environment `AccountId` type.",null,null],[3,"Hash","","The default environment `Hash` type.",null,null],[4,"EnvError","","Errors that can be encountered upon environmental…",null,null],[13,"Decode","","Error upon decoding an encoded value.",0,null],[13,"OffChain","","An error that can only occure in the off-chain environment.",0,null],[13,"ContractCallTrapped","","The call to another contract has trapped.",0,null],[13,"ContractCallFailState","","A called contract returned a custom error code.",0,null],[13,"ContractInstantiationTrapped","","The instantiation of another contract has trapped.",0,null],[13,"ContractInstantiationFailState","","The instantiated contract returned a custom error code.",0,null],[13,"MissingRuntimeStorageEntry","","The queried runtime storage entry is missing.",0,null],[13,"MissingContractStorageEntry","","The queried contract storage entry is missing.",0,null],[13,"TransferCallFailed","","A call to transfer value from the contract failed.",0,null],[4,"DefaultEnvTypes","","The fundamental types of the default configuration.",null,null],[5,"caller","","Returns the address of the caller of the executed contract.",null,[[],["result"]]],[5,"transferred_balance","","Returns the transferred balance for the contract execution.",null,[[],["result"]]],[5,"gas_price","","Returns the current price for gas.",null,[[],["result"]]],[5,"gas_left","","Returns the amount of gas left for the contract execution.",null,[[],["result"]]],[5,"block_timestamp","","Returns the current block timestamp.",null,[[],["result"]]],[5,"account_id","","Returns the account ID of the executed contract.",null,[[],["result"]]],[5,"balance","","Returns the balance of the executed contract.",null,[[],["result"]]],[5,"rent_allowance","","Returns the current rent allowance for the executed…",null,[[],["result"]]],[5,"block_number","","Returns the current block number.",null,[[],["result"]]],[5,"minimum_balance","","Returns the minimum balance for the contracts chain.",null,[[],["result"]]],[5,"tombstone_deposit","","Returns the tombstone deposit for the contracts chain.",null,[[],["result"]]],[5,"emit_event","","Emits an event with the given event data.",null,[[["event"]]]],[5,"set_rent_allowance","","Sets the rent allowance of the executed contract to the…",null,[[]]],[5,"set_contract_storage","","Writes the value to the contract storage under the given…",null,[[["v"],["key"]]]],[5,"get_contract_storage","","Returns the value stored under the given key in the…",null,[[["key"]],[["option",["result"]],["result"]]]],[5,"clear_contract_storage","","Clears the contract's storage key entry.",null,[[["key"]]]],[5,"invoke_runtime","","Invokes a call to the runtime.",null,[[],["result"]]],[5,"invoke_contract","","Invokes a contract message.",null,[[["callparams"]],["result"]]],[5,"eval_contract","","Evaluates a contract message and returns its result.",null,[[["callparams"]],["result"]]],[5,"instantiate_contract","","Instantiates another contract.",null,[[["instantiateparams"]],["result"]]],[5,"restore_contract","","Restores a smart contract in tombstone state.",null,[[]]],[5,"terminate_contract","","Terminates the existence of the currently executed smart…",null,[[]]],[5,"transfer","","Transfers value from the contract to the destination…",null,[[],["result"]]],[5,"input","","Returns the input to the executed contract.",null,[[],[["result",["calldata"]],["calldata"]]]],[5,"output","","Returns the value back to the caller of the executed…",null,[[["r"]]]],[5,"random","","Returns a random hash seed.",null,[[],["result"]]],[5,"println","","Prints the given contents to the environmental log.",null,[[["str"]]]],[5,"get_runtime_storage","","Returns the value from the runtime storage at the position…",null,[[],[["option",["result"]],["result"]]]],[0,"call","","Utilities to call or instantiate contracts on the chain.",null,null],[3,"CallBuilder","ink_core::env::call","Builds up a call.",null,null],[3,"CallParams","","The final parameters to the cross-contract call.",null,null],[3,"ReturnType","","Represents a return type.",null,null],[3,"InstantiateBuilder","","Builds up contract instantiations.",null,null],[3,"InstantiateParams","","Builds up contract instantiations.",null,null],[3,"CallData","","The raw ABI respecting input data to a call.",null,null],[3,"Selector","","The function selector.",null,null],[11,"callee","","The code hash of the contract.",1,[[["self"]]]],[11,"gas_limit","","The gas limit for the contract instantiation.",1,[[["self"]],["u64"]]],[11,"transferred_value","","The transferred value for the called contract.",1,[[["self"]]]],[11,"input_data","","The raw encoded input data.",1,[[["self"]],["calldata"]]],[11,"eval","","Returns a builder for a cross-contract call that might…",1,[[["selector"]],[["unsealed"],["returntype"],["callbuilder",["returntype","unsealed"]]]]],[11,"invoke","","Returns a builder for a cross-contract call that cannot…",1,[[["selector"]],[["unsealed"],["callbuilder",["unsealed"]]]]],[11,"gas_limit","","Sets the maximumly allowed gas costs for the call.",2,[[["u64"]],["self"]]],[11,"transferred_value","","Sets the value transferred upon the execution of the call.",2,[[],["self"]]],[11,"push_arg","","Pushes an argument to the inputs of the call.",2,[[["a"]],["self"]]],[11,"seal","","Seals the call builder to prevent further arguments.",2,[[],[["sealed"],["callbuilder",["sealed"]]]]],[11,"fire","","Fires the call to the remote smart contract. Returns the…",2,[[],["result"]]],[11,"fire","","Fires the cross-call to the smart contract.",2,[[],["result"]]],[11,"code_hash","","The code hash of the contract.",3,[[["self"]]]],[11,"gas_limit","","The gas limit for the contract instantiation.",3,[[["self"]],["u64"]]],[11,"endowment","","The endowment for the instantiated contract.",3,[[["self"]]]],[11,"input_data","","The raw encoded input data.",3,[[["self"]],["calldata"]]],[11,"build","","Creates a new create builder without setting any presets.",3,[[["selector"]],[["unsealed"],["codehashunassigned"],["instantiatebuilder",["unsealed","codehashunassigned"]]]]],[11,"gas_limit","","Sets the maximum allowed gas costs for the call.",4,[[["u64"]],["self"]]],[11,"endowment","","Sets the value transferred upon the execution of the call.",4,[[],["self"]]],[11,"using_code","","Using the given code hash.",4,[[],[["instantiatebuilder",["codehashassigned"]],["codehashassigned"]]]],[11,"push_arg","","Pushes an argument to the inputs of the call.",4,[[["a"]],["self"]]],[11,"seal","","Seals the create builder to prevent further arguments.",4,[[],[["sealed"],["instantiatebuilder",["sealed"]]]]],[11,"instantiate","","Instantiates the contract and returns its account ID back…",4,[[],["result"]]],[11,"from_str","","Returns the selector for the given name.",5,[[["str"]],["self"]]],[11,"new","","Creates a selector directly from 4 bytes.",5,[[],["self"]]],[11,"to_bytes","","Returns the underlying bytes of the selector.",5,[[]]],[11,"new","","Creates new call ABI data for the given selector.",6,[[["selector"]],["self"]]],[11,"push_arg","","Pushes the given argument onto the call ABI data in…",6,[[["self"],["a"]]]],[11,"selector","","Returns the selector of `self`.",6,[[["self"]],["selector"]]],[11,"params","","Returns the underlying bytes of the encoded input…",6,[[["self"]]]],[11,"to_bytes","","Returns the underlying byte representation.",6,[[["self"]]]],[0,"state","","",null,null],[4,"CodeHashAssigned","ink_core::env::call::state","Type state to indicate that the `code_hash` for…",null,null],[4,"CodeHashUnassigned","","Type state to indicate that the `code_hash` for…",null,null],[4,"Sealed","","The call builder is sealed and won't accept further…",null,null],[4,"Unsealed","","The call builder is unsealed and will accept further…",null,null],[8,"FromAccountId","ink_core::env::call","Contracts that can be contructed from an `AccountId`",null,null],[10,"from_account_id","","Creates the contract instance from the account ID of the…",7,[[],["self"]]],[0,"test","ink_core::env","Operations on the off-chain testing environment.",null,null],[3,"DefaultAccounts","ink_core::env::test","The default accounts.",null,null],[12,"alice","","",8,null],[12,"bob","","",8,null],[12,"charlie","","",8,null],[12,"django","","",8,null],[12,"eve","","",8,null],[12,"frank","","",8,null],[5,"push_execution_context","","Pushes a contract execution context.",null,[[["calldata"]]]],[5,"pop_execution_context","","Pops the top contract execution context.",null,[[]]],[5,"set_account_balance","","Sets the balance of the account to the given balance.",null,[[],["result"]]],[5,"get_account_balance","","Returns the balance of the account.",null,[[],["result"]]],[5,"set_contract_rent_allowance","","Sets the rent allowance of the contract account to the…",null,[[],["result"]]],[5,"get_contract_rent_allowance","","Returns the rent allowance of the contract account.",null,[[],["result"]]],[5,"set_runtime_storage","","Sets the runtime storage to value for the given key.",null,[[["t"]]]],[5,"set_runtime_call_handler","","Sets the call handler for runtime calls.",null,[[["f"]]]],[5,"set_block_entropy","","Set the entropy hash of the current block.",null,[[],["result"]]],[5,"recorded_printlns","","Returns the contents of the past performed environmental…",null,[[]]],[5,"recorded_events","","Returns the recorded emitted events in order.",null,[[]]],[5,"advance_block","","Advances the chain by a single block.",null,[[],["result"]]],[5,"default_accounts","","Returns the default accounts for testing purposes: Alice,…",null,[[],[["defaultaccounts"],["result",["defaultaccounts"]]]]],[5,"initialize_as_default","","Initializes the whole off-chain environment.",null,[[],["result"]]],[5,"run_test","","Runs the given closure test function with the default…",null,[[["f"]],["result"]]],[5,"get_contract_storage_rw","","Returns the total number of reads and writes of the…",null,[[],["result"]]],[0,"hash","ink_core::env","Built-in efficient cryptographic hash functions.",null,null],[5,"sha2_256","ink_core::env::hash","Conducts the SHA2 256-bit hash of the given bytes and puts…",null,[[]]],[5,"keccak_256","","Conducts the KECCAK 256-bit hash of the given bytes and…",null,[[]]],[5,"blake2_256","","Conducts the BLAKE2 256-bit hash of the given bytes and…",null,[[]]],[5,"blake2_128","","Conducts the BLAKE2 128-bit hash of the given bytes and…",null,[[]]],[6,"Result","ink_core::env","A result of environmental operations.",null,null],[8,"Clear","","The equivalent of `Zero` for hashes.",null,null],[10,"is_clear","","Returns `true` if the hash is clear.",9,[[["self"]],["bool"]]],[10,"clear","","Returns a clear hash.",9,[[],["self"]]],[8,"EnvTypes","","The environmental types usable by contracts defined with…",null,null],[16,"AccountId","","The type of an address.",10,null],[16,"Balance","","The type of balances.",10,null],[16,"Hash","","The type of hash.",10,null],[16,"Timestamp","","The type of timestamps.",10,null],[16,"BlockNumber","","The type of block number.",10,null],[16,"Call","","The type of a call into the runtime",10,null],[8,"Topics","","Implemented by event types to communicate their topic…",null,null],[10,"topics","","Returns the topic hashes of `self`.",11,[[["self"]]]],[0,"hash","ink_core","High-level, built-in and efficient cryptographic hashing…",null,null],[3,"Wrap","ink_core::hash","Wraps a bytes buffer and turns it into an accumulator.",null,null],[3,"HashBuilder","","Generic hash builder to construct hashes given a builder…",null,null],[11,"hash_raw_using","","Conducts the hash for the given bytes.",12,[[["self"]]]],[11,"hash_raw","","Returns the hash for the given bytes.",12,[[["self"]]]],[11,"hash_encoded_using","","Conducts the hash for the encoded input.",12,[[["self"],["t"]]]],[11,"hash_encoded","","Returns the hash for the encoded input.",12,[[["self"],["t"]]]],[0,"hasher","","Supported cryptographic hashing algorithms.",null,null],[4,"Sha2x256Hasher","ink_core::hash::hasher","SHA2 256-bit hasher.",null,null],[4,"Keccak256Hasher","","KECCAK 256-bit hasher.",null,null],[4,"Blake2x256Hasher","","BLAKE2 256-bit hasher.",null,null],[4,"Blake2x128Hasher","","BLAKE2 128-bit hasher.",null,null],[8,"Hasher","","Types that implement this trait are marker types that…",null,null],[16,"Output","","The output of the hash function.",13,null],[10,"finalize_immediate","","Finalizes the hash using the underlying procedure.",13,[[]]],[6,"Sha2x256","ink_core::hash","SHA2 256-bit hash builder.",null,null],[6,"Keccak256","","KECCAK 256-bit hash builder.",null,null],[6,"Blake2x256","","BLAKE2 256-bit hash builder.",null,null],[6,"Blake2x128","","BLAKE2 128-bit hash builder.",null,null],[8,"Accumulator","","Hash builder that accumulates a buffer on the contract side.",null,null],[10,"reset","","Resets the buffer which cleans all state from it.",14,[[["self"]]]],[10,"write","","Writes the given bytes into the buffer.",14,[[["self"]]]],[10,"as_slice","","Returns a shared reference to the slice of the current…",14,[[["self"]]]],[0,"storage","ink_core","Provides low-level primitives to operate on contract…",null,null],[24,"Flush","ink_core::storage","",null,null],[3,"BinaryHeap","","A binary heap collection. The heap depends on `Ord` and is…",null,null],[3,"BitVec","","A space-efficient contiguous growable bit array type.",null,null],[3,"BTreeMap","","Mapping stored in the contract storage.",null,null],[3,"HashMap","","Mapping stored in the contract storage.",null,null],[3,"Stash","","A stash collection.",null,null],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"Value","","A value on the storage.",null,null],[0,"alloc","","Facilities to allocate and deallocate contract storage…",null,null],[24,"AllocateUsing","ink_core::storage::alloc","",null,null],[3,"BumpAlloc","","An allocator that is meant to allocate contract storage at…",null,null],[3,"DynAlloc","","Allocator for dynamic contract storage.",null,null],[11,"from_raw_parts","","Creates a new forward allocator for the given raw parts.",15,[[["key"]],["self"]]],[8,"Allocate","","Types implementing this trait can allocate storage.",null,null],[10,"alloc","","Allocates a storage area.",16,[[["self"],["u64"]],["key"]]],[8,"AllocateUsing","","Types implementing this trait can be allocated on the…",null,null],[10,"allocate_using","","Allocates an uninitialized instance of `Self` using the…",17,[[["a"]],["self"]]],[8,"Allocator","","Types implementing this trait are storage allocators.",null,null],[10,"dealloc","","Deallocates a storage area.",18,[[["self"],["key"]]]],[8,"Initialize","","Types implementing this trait require initialization of…",null,null],[16,"Args","","Arguments used for deployment.",19,null],[11,"default_value","","The default value for default initialization purposes.",19,[[],["option"]]],[11,"try_default_initialize","","Tries to default initialize `self`.",19,[[["self"]]]],[10,"initialize","","Initializes storage of `self` so that it can be safely…",19,[[["self"]]]],[11,"initialize_into","","Initializes storage of `self` so that it can be safely…",19,[[],["self"]]],[0,"cell","ink_core::storage","Provides low-level primitive cell types.",null,null],[3,"SyncCell","ink_core::storage::cell","A synchronized cell.",null,null],[3,"TypedCell","","A typed cell.",null,null],[11,"clear","","Removes the value from the cell.",20,[[["self"]]]],[11,"raw_key","","Returns the associated, internal raw key.",20,[[["self"]],["key"]]],[11,"get","","Returns an immutable reference to the value of the cell.",20,[[["self"]],[["option"],["t"]]]],[11,"set","","Sets the value of the cell.",20,[[["self"],["t"]]]],[11,"get_mut","","Returns a mutable reference to the value of the cell.",20,[[["self"]],[["option"],["t"]]]],[11,"mutate_with","","Mutates the value stored in the cell.",20,[[["self"],["f"]],[["option"],["t"]]]],[11,"clear","","Removes the value stored in the cell.",21,[[["self"]]]],[11,"key","","Returns the associated, internal raw key.",21,[[["self"]],["key"]]],[11,"load","","Loads the value stored in the cell if any.",21,[[["self"]],["option"]]],[11,"store","","Stores the value into the cell.",21,[[["self"],["t"]]]],[0,"chunk","ink_core::storage","Provides low-level primitives to operate on chunks of cells.",null,null],[3,"SyncChunk","ink_core::storage::chunk","A chunk of synchronized cells.",null,null],[3,"TypedChunk","","A chunk of typed cells.",null,null],[11,"clear","","Clears the cache value at position `n`.",22,[[["self"],["u32"]]]],[11,"cells_key","","Returns the underlying key to the cells.",22,[[["self"]],["key"]]],[11,"get","","Returns the value of the `n`-th cell if any.",22,[[["u32"],["self"]],[["option"],["t"]]]],[11,"get_mut","","Returns the value of the `n`-th cell if any.",22,[[["self"],["u32"]],[["option"],["t"]]]],[11,"take","","Takes the value of the `n`-th cell if any.",22,[[["self"],["u32"]],["option"]]],[11,"set","","Sets the value of the `n`-th cell.",22,[[["self"],["u32"],["t"]]]],[11,"put","","Replaces the value of the `n`-th cell and returns its old…",22,[[["self"],["u32"],["t"]],["option"]]],[11,"key","","Returns the underlying key.",23,[[["self"]],["key"]]],[11,"clear","","Removes the value stored in the `n`-th cell.",23,[[["self"],["u32"]]]],[11,"load","","Loads the value stored in the storage at the given index…",23,[[["u32"],["self"]],["option"]]],[11,"store","","Stores the value into the cell at the given index.",23,[[["self"],["u32"],["t"]]]],[11,"len","ink_core::storage","Returns the element stored at index `n` if any.",24,[[["self"]],["u32"]]],[11,"is_empty","","Returns `true` if the heap is empty.",24,[[["self"]],["bool"]]],[11,"peek","","Returns the first node if not empty.",24,[[["self"]],[["option"],["t"]]]],[11,"peek_mut","","Mutates the first node if not empty and returns a…",24,[[["self"]],[["option"],["t"]]]],[11,"pop","","If the heap is not empty the first node is returned and…",24,[[["self"]],["option"]]],[11,"push","","Pushes an item onto the heap.",24,[[["self"],["t"]]]],[11,"values","","Returns an iterator over the references of all nodes of…",24,[[["self"]],["values"]]],[11,"iter","","Returns an iterator over all nodes of the heap. The order…",24,[[["self"]],["iter"]]],[11,"len","","Returns the number of bits.",25,[[["self"]],["u32"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",25,[[["self"]],["bool"]]],[11,"first","","Returns the first bit of the bit vector or `None` it is…",25,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"last","","Returns the last bit of the bit vector or `None` if it is…",25,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"push","","Appends a bit to the back of the bit vector.",25,[[["self"],["bool"]]]],[11,"pop","","Removes the last bit from the bit vector and returns it,…",25,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"get","","Returns the `n`-th bit of the bit vector.",25,[[["u32"],["self"]],[["option",["bool"]],["bool"]]]],[11,"set","","Sets the n-th bit of the bit vector.",25,[[["self"],["u32"],["bool"]]]],[11,"flip","","Flips the n-th bit of the bit vector.",25,[[["self"],["u32"]]]],[11,"iter","","Returns an iterator over all bits of the bit vector.",25,[[["self"]],["iter"]]],[11,"first_set_position","","Returns the position of the first set bit in `self` if any.",25,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"len","","Returns the number of elements stored in the map.",26,[[["self"]],["u32"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",26,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the value corresponding to the key.",26,[[["self"],["q"]],[["option"],["v"]]]],[11,"get_key_value","","Returns the key/value pair corresponding to `key`.",26,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",26,[[["self"],["q"]],["bool"]]],[11,"insert","","Inserts a key/value pair into the map.",26,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",26,[[["self"],["q"]],["option"]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",26,[[["self"],["k"]],["entry"]]],[11,"len","","Returns the number of key-value pairs in the map.",27,[[["self"]],["u32"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",27,[[["self"]],["bool"]]],[11,"insert","","Inserts a key-value pair into the map.",27,[[["self"],["k"],["v"]],["option"]]],[11,"mutate_with","","Mutates the value associated with the key if any.",27,[[["self"],["f"],["q"]],[["option"],["v"]]]],[11,"remove","","Removes a key from the map, returning the value at the key…",27,[[["self"],["q"]],["option"]]],[11,"get","","Returns an immutable reference to the value corresponding…",27,[[["self"],["q"]],[["option"],["v"]]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",27,[[["self"],["q"]],[["option"],["v"]]]],[11,"contains_key","","Returns `true` if there is an entry corresponding to the…",27,[[["self"],["q"]],["bool"]]],[11,"iter","","Returns an iterator over the references of all entries of…",28,[[["self"]],["iter"]]],[11,"values","","Returns an iterator over the references of all values of…",28,[[["self"]],["values"]]],[11,"entries_key","","Returns the underlying key to the cells.",28,[[["self"]],["key"]]],[11,"len","","Returns the number of elements stored in the stash.",28,[[["self"]],["u32"]]],[11,"max_len","","Returns the maximum number of element stored in the stash…",28,[[["self"]],["u32"]]],[11,"is_empty","","Returns `true` if the stash contains no elements.",28,[[["self"]],["bool"]]],[11,"get","","Returns the element stored at index `n` if any.",28,[[["u32"],["self"]],[["option"],["t"]]]],[11,"put","","Put the element into the stash at the next vacant position.",28,[[["self"],["t"]],["u32"]]],[11,"take","","Takes the element stored at index `n`-th if any.",28,[[["self"],["u32"]],["option"]]],[11,"len","","Returns the number of elements in the vector, also…",29,[[["self"]],["u32"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",29,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the references of all elements…",29,[[["self"]],["iter"]]],[11,"get","","Returns a reference to the `n`-th element of the vector.",29,[[["u32"],["self"]],[["option"],["t"]]]],[11,"get_mut","","Returns a mutable reference to the `n`-th element of the…",29,[[["self"],["u32"]],[["option"],["t"]]]],[11,"mutate","","Mutates the `n`-th element of the vector.",29,[[["self"],["u32"],["f"]],[["option"],["t"]]]],[11,"push","","Appends an element to the back of the vector.",29,[[["self"],["t"]]]],[11,"pop","","Removes the last element from the vector and returns it,…",29,[[["self"]],["option"]]],[11,"replace","","Replaces the `n`-th element of the vector and returns its…",29,[[["self"],["u32"],["f"]],["option"]]],[11,"swap","","Swaps the `a`-th and the `b`-th elements.",29,[[["self"],["u32"]]]],[11,"swap_remove","","Removes the `n`-th element from the vector and returns it.",29,[[["self"],["u32"]],["option"]]],[11,"default_using","","Creates a new storage value initialized as its default…",30,[[["a"]],["self"]]],[11,"get","","Returns an immutable reference to the wrapped value.",30,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the wrapped value.",30,[[["self"]],["t"]]],[11,"set","","Sets the wrapped value to the given value.",30,[[["self"],["t"]]]],[11,"mutate_with","","Mutates the wrapped value inplace by the given closure.",30,[[["self"],["f"]],["t"]]],[0,"binary_heap","","A binary heap collection. The heap depends on `Ord` and is…",null,null],[3,"BinaryHeap","ink_core::storage::binary_heap","A binary heap collection. The heap depends on `Ord` and is…",null,null],[3,"Iter","","Iterator over the elements of a heap. The iteration is not…",null,null],[3,"Values","","Iterator over the values of a heap.",null,null],[0,"bitvec","ink_core::storage","A space-efficient contiguous growable bit array type.",null,null],[3,"BitVec","ink_core::storage::bitvec","A space-efficient contiguous growable bit array type.",null,null],[3,"Iter","","Iterator over the bits of a bit vector.",null,null],[0,"btree_map","ink_core::storage","A BTreeMap collection.",null,null],[3,"BTreeMap","ink_core::storage::btree_map","Mapping stored in the contract storage.",null,null],[4,"Entry","","An entry of a storage map.",null,null],[13,"Vacant","","A vacant entry pointing to the next vacant index.",31,null],[13,"Occupied","","An occupied entry containing the value.",31,null],[0,"hash_map","ink_core::storage","A hash map implemented with quadratic probing.",null,null],[3,"HashMap","ink_core::storage::hash_map","Mapping stored in the contract storage.",null,null],[0,"stash","ink_core::storage","A stash collection.",null,null],[3,"Iter","ink_core::storage::stash","Iterator over the entries of a stash.",null,null],[3,"Stash","","A stash collection.",null,null],[3,"Values","","Iterator over the values of a stash.",null,null],[0,"vec","ink_core::storage","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"Iter","ink_core::storage::vec","An iterator over the values of a storage `Vec`.",null,null],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but…",null,null],[8,"Flush","ink_core::storage","Types that are able to flush their state into the contract…",null,null],[11,"flush","","Flushes the cached state back to the contract storage, if…",32,[[["self"]]]],[8,"Allocator","","Types implementing this trait are storage allocators.",null,null],[10,"dealloc","","Deallocates a storage area.",18,[[["self"],["key"]]]],[11,"from","ink_core::env","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"decode","","",33,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",33,[[["self"]],["usize"]]],[11,"using_encoded","","",33,[[["self"],["f"]],["r"]]],[11,"encode","","",33,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",33,[[["w"],["self"]]]],[11,"to_keyed_vec","","",33,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",33,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",33,[[],["metatype"]]],[11,"vzip","","",33,[[],["v"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"decode","","",34,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",34,[[["self"]],["usize"]]],[11,"using_encoded","","",34,[[["self"],["f"]],["r"]]],[11,"encode","","",34,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",34,[[["w"],["self"]]]],[11,"as_byte_slice","","",34,[[["self"]]]],[11,"to_keyed_vec","","",34,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",34,[[],[["result",["error"]],["error"]]]],[11,"as_slice_of","","",34,[[["self"]],[["error"],["result",["error"]]]]],[11,"as_mut_slice_of","","",34,[[["self"]],[["error"],["result",["error"]]]]],[11,"as_mut_byte_slice","","",34,[[["self"]]]],[11,"meta_type","","",34,[[],["metatype"]]],[11,"vzip","","",34,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"meta_type","","",35,[[],["metatype"]]],[11,"vzip","","",35,[[],["v"]]],[11,"from","ink_core::env::call","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"vzip","","",36,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"decode","","",6,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",6,[[["self"]],["usize"]]],[11,"using_encoded","","",6,[[["self"],["f"]],["r"]]],[11,"encode","","",6,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",6,[[["w"],["self"]]]],[11,"to_keyed_vec","","",6,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",6,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"decode","","",5,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",5,[[["self"]],["usize"]]],[11,"using_encoded","","",5,[[["self"],["f"]],["r"]]],[11,"encode","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",5,[[["w"],["self"]]]],[11,"to_keyed_vec","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",5,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","ink_core::env::call::state","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"vzip","","",37,[[],["v"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"vzip","","",38,[[],["v"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"vzip","","",39,[[],["v"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"vzip","","",40,[[],["v"]]],[11,"from","ink_core::env::test","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","ink_core::hash","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"vzip","","",41,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"write","","",12,[[["self"]]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","ink_core::hash::hasher","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"vzip","","",42,[[],["v"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"vzip","","",43,[[],["v"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"vzip","","",44,[[],["v"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"vzip","","",45,[[],["v"]]],[11,"from","ink_core::storage","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"decode","","",24,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",24,[[["self"]],["usize"]]],[11,"using_encoded","","",24,[[["self"],["f"]],["r"]]],[11,"encode","","",24,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",24,[[["w"],["self"]]]],[11,"and","","",24,[[["v"]],["t"]]],[11,"to_keyed_vec","","",24,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",24,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",24,[[],["metatype"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"decode","","",25,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",25,[[["self"]],["usize"]]],[11,"using_encoded","","",25,[[["self"],["f"]],["r"]]],[11,"encode","","",25,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",25,[[["w"],["self"]]]],[11,"to_keyed_vec","","",25,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",25,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",25,[[],["metatype"]]],[11,"vzip","","",25,[[],["v"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"decode","","",26,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",26,[[["self"]],["usize"]]],[11,"using_encoded","","",26,[[["self"],["f"]],["r"]]],[11,"encode","","",26,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",26,[[["w"],["self"]]]],[11,"to_keyed_vec","","",26,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",26,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",26,[[],["metatype"]]],[11,"vzip","","",26,[[],["v"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"decode","","",27,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",27,[[["self"]],["usize"]]],[11,"using_encoded","","",27,[[["self"],["f"]],["r"]]],[11,"encode","","",27,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",27,[[["w"],["self"]]]],[11,"to_keyed_vec","","",27,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",27,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",27,[[],["metatype"]]],[11,"vzip","","",27,[[],["v"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"decode","","",28,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",28,[[["self"]],["usize"]]],[11,"using_encoded","","",28,[[["self"],["f"]],["r"]]],[11,"encode","","",28,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",28,[[["w"],["self"]]]],[11,"to_keyed_vec","","",28,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",28,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",28,[[],["metatype"]]],[11,"vzip","","",28,[[],["v"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"decode","","",29,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",29,[[["self"]],["usize"]]],[11,"using_encoded","","",29,[[["self"],["f"]],["r"]]],[11,"encode","","",29,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",29,[[["w"],["self"]]]],[11,"and","","",29,[[["v"]],["t"]]],[11,"to_keyed_vec","","",29,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",29,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",29,[[],["metatype"]]],[11,"vzip","","",29,[[],["v"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"decode","","",30,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",30,[[["self"]],["usize"]]],[11,"using_encoded","","",30,[[["self"],["f"]],["r"]]],[11,"encode","","",30,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",30,[[["w"],["self"]]]],[11,"as_byte_slice","","",30,[[["self"]]]],[11,"to_keyed_vec","","",30,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",30,[[],[["result",["error"]],["error"]]]],[11,"as_slice_of","","",30,[[["self"]],[["error"],["result",["error"]]]]],[11,"meta_type","","",30,[[],["metatype"]]],[11,"vzip","","",30,[[],["v"]]],[11,"from","ink_core::storage::alloc","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"meta_type","","",15,[[],["metatype"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"meta_type","","",46,[[],["metatype"]]],[11,"vzip","","",46,[[],["v"]]],[11,"from","ink_core::storage::cell","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"decode","","",20,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",20,[[["self"]],["usize"]]],[11,"using_encoded","","",20,[[["self"],["f"]],["r"]]],[11,"encode","","",20,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",20,[[["w"],["self"]]]],[11,"to_keyed_vec","","",20,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",20,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",20,[[],["metatype"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"decode","","",21,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",21,[[["self"]],["usize"]]],[11,"using_encoded","","",21,[[["self"],["f"]],["r"]]],[11,"encode","","",21,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",21,[[["w"],["self"]]]],[11,"to_keyed_vec","","",21,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",21,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","ink_core::storage::chunk","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"decode","","",22,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",22,[[["self"]],["usize"]]],[11,"using_encoded","","",22,[[["self"],["f"]],["r"]]],[11,"encode","","",22,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",22,[[["w"],["self"]]]],[11,"to_keyed_vec","","",22,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",22,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",22,[[],["metatype"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"decode","","",23,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",23,[[["self"]],["usize"]]],[11,"using_encoded","","",23,[[["self"],["f"]],["r"]]],[11,"encode","","",23,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",23,[[["w"],["self"]]]],[11,"to_keyed_vec","","",23,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",23,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","ink_core::storage::binary_heap","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"into_iter","","",47,[[],["i"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"vzip","","",47,[[],["v"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"into_iter","","",48,[[],["i"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"vzip","","",48,[[],["v"]]],[11,"from","ink_core::storage::bitvec","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"into_iter","","",49,[[],["i"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"vzip","","",49,[[],["v"]]],[11,"from","ink_core::storage::btree_map","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"vzip","","",31,[[],["v"]]],[11,"from","ink_core::storage::stash","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"into_iter","","",50,[[],["i"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"vzip","","",50,[[],["v"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"into_iter","","",51,[[],["i"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"vzip","","",51,[[],["v"]]],[11,"from","ink_core::storage::vec","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"into_iter","","",52,[[],["i"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"vzip","","",52,[[],["v"]]],[11,"is_clear","ink_core::env","",34,[[["self"]],["bool"]]],[11,"clear","","",34,[[],["self"]]],[11,"reset","ink_core::hash","",41,[[["self"]]]],[11,"write","","",41,[[["self"]]]],[11,"as_slice","","",41,[[["self"]]]],[11,"finalize_immediate","ink_core::hash::hasher","",42,[[]]],[11,"finalize_immediate","","",43,[[]]],[11,"finalize_immediate","","",44,[[]]],[11,"finalize_immediate","","",45,[[]]],[11,"alloc","ink_core::storage::alloc","",15,[[["self"],["u64"]],["key"]]],[11,"alloc","","Can only allocate sizes of up to `u32::MAX`.",46,[[["self"],["u64"]],["key"]]],[11,"dealloc","","",46,[[["self"],["key"]]]],[11,"allocate_using","","",46,[[["a"]],["self"]]],[11,"allocate_using","ink_core::storage::cell","",20,[[["a"]],["self"]]],[11,"allocate_using","","",21,[[["a"]],["self"]]],[11,"allocate_using","ink_core::storage::chunk","",22,[[["a"]],["self"]]],[11,"allocate_using","","",23,[[["a"]],["self"]]],[11,"allocate_using","ink_core::storage","",24,[[["a"]],["self"]]],[11,"allocate_using","","",25,[[["a"]],["self"]]],[11,"allocate_using","","",26,[[["a"]],["self"]]],[11,"allocate_using","","",27,[[["a"]],["self"]]],[11,"allocate_using","","",28,[[["a"]],["self"]]],[11,"allocate_using","","",29,[[["a"]],["self"]]],[11,"allocate_using","","",30,[[["a"]],["self"]]],[11,"initialize","ink_core::storage::alloc","",46,[[["self"]]]],[11,"default_value","ink_core::storage","",24,[[],["option"]]],[11,"initialize","","",24,[[["self"]]]],[11,"default_value","","",25,[[],["option"]]],[11,"initialize","","",25,[[["self"]]]],[11,"default_value","","",26,[[],["option"]]],[11,"initialize","","",26,[[["self"]]]],[11,"default_value","","",27,[[],["option"]]],[11,"initialize","","",27,[[["self"]]]],[11,"default_value","","",28,[[],["option"]]],[11,"initialize","","",28,[[["self"]]]],[11,"default_value","","",29,[[],["option"]]],[11,"initialize","","",29,[[["self"]]]],[11,"initialize","","",30,[[["self"]]]],[11,"flush","ink_core::storage::alloc","",46,[[["self"]]]],[11,"flush","ink_core::storage::cell","",20,[[["self"]]]],[11,"flush","ink_core::storage::chunk","",22,[[["self"]]]],[11,"flush","ink_core::storage","",24,[[["self"]]]],[11,"flush","","",25,[[["self"]]]],[11,"flush","","",26,[[["self"]]]],[11,"flush","","",27,[[["self"]]]],[11,"flush","","",28,[[["self"]]]],[11,"flush","","",29,[[["self"]]]],[11,"flush","","",30,[[["self"]]]],[11,"drop","","",25,[[["self"]]]],[11,"drop","","",30,[[["self"]]]],[11,"as_mut","ink_core::env","",34,[[["self"]]]],[11,"as_ref","","",34,[[["self"]]]],[11,"as_ref","ink_core::storage","",30,[[["self"]],["r"]]],[11,"from","ink_core::env::call","",5,[[],["selector"]]],[11,"from","","Computes the selector from the given input bytes.",5,[[],["self"]]],[11,"from","ink_core::env","",0,[[["error"]],["enverror"]]],[11,"from","","",33,[[],["accountid"]]],[11,"from","","",34,[[],["hash"]]],[11,"from","ink_core::hash","",41,[[],["self"]]],[11,"from","","",12,[[["s"]],["self"]]],[11,"next_back","ink_core::storage::binary_heap","",47,[[["self"]],["option"]]],[11,"next_back","","",48,[[["self"]],["option"]]],[11,"next_back","ink_core::storage::bitvec","",49,[[["self"]],["option"]]],[11,"next_back","ink_core::storage::stash","",50,[[["self"]],["option"]]],[11,"next_back","","",51,[[["self"]],["option"]]],[11,"next_back","ink_core::storage::vec","",52,[[["self"]],["option"]]],[11,"extend","ink_core::storage","",24,[[["self"],["i"]]]],[11,"extend","","",24,[[["self"],["i"]]]],[11,"extend","","",25,[[["intoiterator"],["self"]]]],[11,"extend","","",25,[[["intoiterator"],["self"]]]],[11,"extend","","",26,[[["intoiterator"],["self"]]]],[11,"extend","","",26,[[["self"],["intoiterator"]]]],[11,"extend","","",26,[[["intoiterator"],["self"]]]],[11,"extend","","",27,[[["intoiterator"],["self"]]]],[11,"extend","","",27,[[["self"],["intoiterator"]]]],[11,"extend","","",27,[[["intoiterator"],["self"]]]],[11,"extend","","",29,[[["self"],["i"]]]],[11,"extend","","",29,[[["self"],["i"]]]],[11,"next","ink_core::storage::binary_heap","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,[[["self"]]]],[11,"next","","",48,[[["self"]],["option"]]],[11,"size_hint","","",48,[[["self"]]]],[11,"next","ink_core::storage::bitvec","",49,[[["self"]],["option"]]],[11,"size_hint","","",49,[[["self"]]]],[11,"next","ink_core::storage::stash","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,[[["self"]]]],[11,"next","","",51,[[["self"]],["option"]]],[11,"size_hint","","",51,[[["self"]]]],[11,"next","ink_core::storage::vec","",52,[[["self"]],["option"]]],[11,"size_hint","","",52,[[["self"]]]],[11,"clone","ink_core::env::call","",36,[[["self"]],["returntype"]]],[11,"clone","","",5,[[["self"]],["selector"]]],[11,"clone","","",6,[[["self"]],["calldata"]]],[11,"clone","ink_core::env","",35,[[["self"]],["defaultenvtypes"]]],[11,"clone","","",33,[[["self"]],["accountid"]]],[11,"clone","","",34,[[["self"]],["hash"]]],[11,"default","","",33,[[],["accountid"]]],[11,"default","","",34,[[],["hash"]]],[11,"cmp","","",33,[[["self"],["accountid"]],["ordering"]]],[11,"cmp","","",34,[[["self"],["hash"]],["ordering"]]],[11,"cmp","ink_core::storage","",30,[[["self"]],["ordering"]]],[11,"eq","ink_core::env::call","",36,[[["self"],["returntype"]],["bool"]]],[11,"ne","","",36,[[["self"],["returntype"]],["bool"]]],[11,"eq","","",5,[[["self"],["selector"]],["bool"]]],[11,"ne","","",5,[[["self"],["selector"]],["bool"]]],[11,"eq","","",6,[[["calldata"],["self"]],["bool"]]],[11,"ne","","",6,[[["calldata"],["self"]],["bool"]]],[11,"eq","ink_core::env","",0,[[["enverror"],["self"]],["bool"]]],[11,"ne","","",0,[[["enverror"],["self"]],["bool"]]],[11,"eq","","",35,[[["defaultenvtypes"],["self"]],["bool"]]],[11,"eq","","",33,[[["self"],["accountid"]],["bool"]]],[11,"ne","","",33,[[["self"],["accountid"]],["bool"]]],[11,"eq","","",34,[[["self"],["hash"]],["bool"]]],[11,"ne","","",34,[[["self"],["hash"]],["bool"]]],[11,"eq","ink_core::storage::cell","",21,[[["typedcell"],["self"]],["bool"]]],[11,"ne","","",21,[[["typedcell"],["self"]],["bool"]]],[11,"eq","ink_core::storage::chunk","",23,[[["typedchunk"],["self"]],["bool"]]],[11,"ne","","",23,[[["typedchunk"],["self"]],["bool"]]],[11,"eq","ink_core::storage","",30,[[["t"],["self"]],["bool"]]],[11,"eq","","",30,[[["self"]],["bool"]]],[11,"partial_cmp","ink_core::env","",33,[[["self"],["accountid"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",33,[[["self"],["accountid"]],["bool"]]],[11,"le","","",33,[[["self"],["accountid"]],["bool"]]],[11,"gt","","",33,[[["self"],["accountid"]],["bool"]]],[11,"ge","","",33,[[["self"],["accountid"]],["bool"]]],[11,"partial_cmp","","",34,[[["self"],["hash"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",34,[[["self"],["hash"]],["bool"]]],[11,"le","","",34,[[["self"],["hash"]],["bool"]]],[11,"gt","","",34,[[["self"],["hash"]],["bool"]]],[11,"ge","","",34,[[["self"],["hash"]],["bool"]]],[11,"partial_cmp","ink_core::storage","",30,[[["t"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",30,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"deref","","",30,[[["self"]]]],[11,"deref_mut","","",30,[[["self"]]]],[11,"fmt","ink_core::env::call","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::env","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage::alloc","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage::cell","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage::chunk","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage::binary_heap","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage::stash","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage::vec","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","ink_core::storage","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"add_assign","","",30,[[["self"],["t"]]]],[11,"add_assign","","",30,[[["self"],["value"]]]],[11,"sub_assign","","",30,[[["self"],["t"]]]],[11,"sub_assign","","",30,[[["self"],["value"]]]],[11,"mul_assign","","",30,[[["self"],["t"]]]],[11,"mul_assign","","",30,[[["self"],["value"]]]],[11,"div_assign","","",30,[[["self"],["t"]]]],[11,"div_assign","","",30,[[["self"],["value"]]]],[11,"rem_assign","","",30,[[["self"],["t"]]]],[11,"rem_assign","","",30,[[["self"],["value"]]]],[11,"bitand_assign","","",30,[[["self"],["t"]]]],[11,"bitand_assign","","",30,[[["self"],["value"]]]],[11,"bitor_assign","","",30,[[["self"],["t"]]]],[11,"bitor_assign","","",30,[[["self"],["value"]]]],[11,"bitxor_assign","","",30,[[["self"],["t"]]]],[11,"bitxor_assign","","",30,[[["self"],["value"]]]],[11,"shl_assign","","",30,[[["self"],["r"]]]],[11,"shr_assign","","",30,[[["self"],["r"]]]],[11,"index","","",27,[[["self"],["q"]]]],[11,"index","","",29,[[["u32"],["self"]]]],[11,"index","","",30,[[["i"],["self"]]]],[11,"index_mut","","",27,[[["self"],["q"]]]],[11,"index_mut","","",29,[[["self"],["u32"]]]],[11,"hash","ink_core::env","",33,[[["self"],["__h"]]]],[11,"hash","","",34,[[["self"],["__h"]]]],[11,"hash","ink_core::storage::cell","",21,[[["self"],["__h"]]]],[11,"hash","ink_core::storage","",30,[[["self"],["h"]]]],[11,"try_from","ink_core::env","",33,[[],[["result",["tryfromsliceerror"]],["tryfromsliceerror"]]]],[11,"try_from","","",34,[[],[["result",["tryfromsliceerror"]],["tryfromsliceerror"]]]],[11,"decode","ink_core::env::call","",5,[[["decin"]],[["error"],["result",["error"]]]]],[11,"decode","","",6,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","ink_core::env","",33,[[["decin"]],[["error"],["result",["error"]]]]],[11,"decode","","",34,[[["decin"]],[["error"],["result",["error"]]]]],[11,"decode","ink_core::storage::cell","",20,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",21,[[["decin"]],[["error"],["result",["error"]]]]],[11,"decode","ink_core::storage::chunk","",22,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",23,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","ink_core::storage","",24,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",25,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",26,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","ink_core::storage::btree_map","",31,[[["decin"]],[["error"],["result",["error"]]]]],[11,"decode","ink_core::storage","",27,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",28,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",29,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",30,[[["decin"]],[["error"],["result",["error"]]]]],[11,"encode_to","ink_core::env::call","",5,[[["self"],["encout"]]]],[11,"encode","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",5,[[["fnonce"],["self"]],["r"]]],[11,"size_hint","","",6,[[["self"]],["usize"]]],[11,"encode_to","","",6,[[["self"],["t"]]]],[11,"encode_to","ink_core::env","",33,[[["self"],["encout"]]]],[11,"encode","","",33,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",33,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",34,[[["self"],["encout"]]]],[11,"encode","","",34,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",34,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","ink_core::storage::cell","",20,[[["w"],["self"]]]],[11,"encode_to","","",21,[[["self"],["encout"]]]],[11,"encode_to","ink_core::storage::chunk","",22,[[["w"],["self"]]]],[11,"encode_to","","",23,[[["w"],["self"]]]],[11,"encode_to","ink_core::storage","",24,[[["w"],["self"]]]],[11,"encode_to","","",25,[[["w"],["self"]]]],[11,"encode_to","","",26,[[["w"],["self"]]]],[11,"encode_to","ink_core::storage::btree_map","",31,[[["self"],["encout"]]]],[11,"encode_to","ink_core::storage","",27,[[["w"],["self"]]]],[11,"encode_to","","",28,[[["w"],["self"]]]],[11,"encode_to","","",29,[[["w"],["self"]]]],[11,"encode_to","","",30,[[["self"],["encout"]]]],[11,"encode","","",30,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",30,[[["fnonce"],["self"]],["r"]]],[11,"write","ink_core::hash","",12,[[["self"]]]],[11,"type_def","ink_core::env","",35,[[],["typedef"]]],[11,"type_def","","",33,[[],["typedef"]]],[11,"type_def","","",34,[[],["typedef"]]],[11,"type_def","ink_core::storage::alloc","",15,[[],["typedef"]]],[11,"type_def","","",46,[[],["typedef"]]],[11,"type_def","ink_core::storage::cell","",20,[[],["typedef"]]],[11,"type_def","ink_core::storage::chunk","",22,[[],["typedef"]]],[11,"type_def","ink_core::storage","",24,[[],["typedef"]]],[11,"type_def","","",25,[[],["typedef"]]],[11,"type_def","","",26,[[],["typedef"]]],[11,"type_def","","",27,[[],["typedef"]]],[11,"type_def","","",28,[[],["typedef"]]],[11,"type_def","","",29,[[],["typedef"]]],[11,"type_def","","",30,[[],["typedef"]]],[11,"type_id","ink_core::env","",35,[[],["typeid"]]],[11,"type_id","","",33,[[],["typeid"]]],[11,"type_id","","",34,[[],["typeid"]]],[11,"type_id","ink_core::storage::alloc","",15,[[],["typeid"]]],[11,"type_id","","",46,[[],["typeid"]]],[11,"type_id","ink_core::storage::cell","",20,[[],["typeid"]]],[11,"type_id","ink_core::storage::chunk","",22,[[],["typeid"]]],[11,"type_id","ink_core::storage","",24,[[],["typeid"]]],[11,"type_id","","",25,[[],["typeid"]]],[11,"type_id","","",26,[[],["typeid"]]],[11,"type_id","","",27,[[],["typeid"]]],[11,"type_id","","",28,[[],["typeid"]]],[11,"type_id","","",29,[[],["typeid"]]],[11,"type_id","","",30,[[],["typeid"]]],[11,"layout","ink_core::storage::alloc","",46,[[["self"]],["storagelayout"]]],[11,"layout","ink_core::storage::cell","",20,[[["self"]],["storagelayout"]]],[11,"layout","ink_core::storage::chunk","",22,[[["self"]],["storagelayout"]]],[11,"layout","ink_core::storage","",24,[[["self"]],["storagelayout"]]],[11,"layout","","",25,[[["self"]],["storagelayout"]]],[11,"layout","","",26,[[["self"]],["storagelayout"]]],[11,"layout","","",27,[[["self"]],["storagelayout"]]],[11,"layout","","",28,[[["self"]],["storagelayout"]]],[11,"layout","","",29,[[["self"]],["storagelayout"]]],[11,"layout","","",30,[[["self"]],["storagelayout"]]],[11,"default_value","ink_core::storage::alloc","The default value for default initialization purposes.",19,[[],["option"]]],[11,"try_default_initialize","","Tries to default initialize `self`.",19,[[["self"]]]],[11,"initialize_into","","Initializes storage of `self` so that it can be safely…",19,[[],["self"]]],[11,"or_insert","ink_core::storage::btree_map","Ensures a value is in the entry by inserting the default…",31,[[["v"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",31,[[["self"]],["k"]]],[11,"flush","ink_core::storage","Flushes the cached state back to the contract storage, if…",32,[[["self"]]]]],"p":[[4,"EnvError"],[3,"CallParams"],[3,"CallBuilder"],[3,"InstantiateParams"],[3,"InstantiateBuilder"],[3,"Selector"],[3,"CallData"],[8,"FromAccountId"],[3,"DefaultAccounts"],[8,"Clear"],[8,"EnvTypes"],[8,"Topics"],[3,"HashBuilder"],[8,"Hasher"],[8,"Accumulator"],[3,"BumpAlloc"],[8,"Allocate"],[8,"AllocateUsing"],[8,"Allocator"],[8,"Initialize"],[3,"SyncCell"],[3,"TypedCell"],[3,"SyncChunk"],[3,"TypedChunk"],[3,"BinaryHeap"],[3,"BitVec"],[3,"BTreeMap"],[3,"HashMap"],[3,"Stash"],[3,"Vec"],[3,"Value"],[4,"Entry"],[8,"Flush"],[3,"AccountId"],[3,"Hash"],[4,"DefaultEnvTypes"],[3,"ReturnType"],[4,"CodeHashAssigned"],[4,"CodeHashUnassigned"],[4,"Sealed"],[4,"Unsealed"],[3,"Wrap"],[4,"Sha2x256Hasher"],[4,"Keccak256Hasher"],[4,"Blake2x256Hasher"],[4,"Blake2x128Hasher"],[3,"DynAlloc"],[3,"Values"],[3,"Iter"],[3,"Iter"],[3,"Values"],[3,"Iter"],[3,"Iter"]]};
searchIndex["ink_core_derive"] = {"doc":"","i":[[24,"Flush","ink_core_derive","",null,null],[24,"AllocateUsing","","",null,null]],"p":[]};
searchIndex["ink_lang"] = {"doc":"","i":[[23,"contract","ink_lang","",null,null],[3,"Contract","","The contract definition.",null,null],[12,"storage","","The storage holding contract state.",0,null],[12,"constructors","","The dispatchable constructors.",0,null],[12,"messages","","The dispatchable messages.",0,null],[3,"ContractBuilder","","Simplifies declaration of a smart contract.",null,null],[3,"DispatchList","","A list of dispatchers.",null,null],[3,"Dispatcher","","Dispatcher for storage preserving messages.",null,null],[3,"DispatcherMut","","Dispatcher for potentially storage mutating messages and…",null,null],[3,"UnreachableDispatcher","","A dispatcher that shall never dispatch.",null,null],[3,"EnvAccess","","A typed accessor to the environment.",null,null],[3,"DispatchRetCode","","A return code indicating success or error in a compact form.",null,null],[4,"DispatchMode","","The contract dispatch mode.",null,null],[13,"Instantiate","","Mode for instantiating a contract.",1,null],[13,"Call","","Mode for calling a contract.",1,null],[4,"DispatchError","","A dispatch error.",null,null],[13,"UnknownSelector","","",2,null],[13,"UnknownInstantiateSelector","","",2,null],[13,"UnknownCallSelector","","",2,null],[13,"InvalidParameters","","",2,null],[13,"InvalidInstantiateParameters","","",2,null],[13,"InvalidCallParameters","","",2,null],[13,"CouldNotReadInput","","",2,null],[11,"with_storage","","Creates a new contract definition for the given storage…",0,[[],[["emptydispatchlist"],["contractbuilder",["emptydispatchlist","emptydispatchlist"]]]]],[11,"on_instantiate","","Pushes a new constructor to the contract definition.",3,[[["dispatchablefnmut"]],[["dispatchlist",["dispatchermut"]],["contractbuilder",["dispatchlist","emptydispatchlist"]],["emptydispatchlist"]]]],[11,"on_msg","","Pushes a new message to the contract definition.",3,[[["dispatchablefn"]],[["dispatchlist",["dispatcher"]],["contractbuilder",["dispatchlist"]]]]],[11,"on_msg_mut","","Pushes a new message to the contract definition.",3,[[["dispatchablefnmut"]],[["dispatchlist",["dispatchermut"]],["contractbuilder",["dispatchlist"]]]]],[11,"done","","Finalizes construction of the contract definition.",3,[[],[["contract",["dispatchlist","dispatchlist"]],["dispatchlist"],["dispatchlist"]]]],[11,"dispatch_using_mode","","",0,[[["dispatchmode"]],[["result",["dispatcherror"]],["dispatcherror"]]]],[11,"empty","","Creates a new dispatch list.",4,[[],["unreachabledispatcher"]]],[11,"selector","","Returns the associated handler selector.",5,[[],["selector"]]],[11,"new","","Constructs a message handler from its raw counterpart.",5,[[["dispatchablefn"]],["self"]]],[11,"eval","","Calls the dispatchable function and returns its result.",5,[[["s"],["self"]]]],[11,"selector","","Returns the associated handler selector.",6,[[],["selector"]]],[11,"new","","Constructs a message handler from its raw counterpart.",6,[[["dispatchablefnmut"]],["self"]]],[11,"eval","","Calls the dispatchable function and returns its result.",6,[[["s"],["self"]]]],[11,"caller","","Returns the address of the caller of the executed contract.",7,[[]]],[11,"transferred_balance","","Returns the transferred balance for the contract execution.",7,[[]]],[11,"gas_price","","Returns the current price for gas.",7,[[]]],[11,"gas_left","","Returns the amount of gas left for the contract execution.",7,[[]]],[11,"block_timestamp","","Returns the timstamp of the current block.",7,[[]]],[11,"account_id","","Returns the account ID of the executed contract.",7,[[]]],[11,"address","","Returns the account ID of the executed contract.",7,[[]]],[11,"balance","","Returns the balance of the executed contract.",7,[[]]],[11,"rent_allowance","","Returns the current rent allowance for the executed…",7,[[]]],[11,"block_number","","Returns the current block number.",7,[[]]],[11,"minimum_balance","","Returns the minimum balance for the contracts chain.",7,[[]]],[11,"tombstone_deposit","","Returns the tombstone deposit for the contracts chain.",7,[[]]],[11,"emit_event","","Emits an event with the given event data.",7,[[["event"]]]],[11,"set_rent_allowance","","Sets the rent allowance of the executed contract to the…",7,[[]]],[11,"invoke_runtime","","Invokes a call to the runtime.",7,[[],["result"]]],[11,"invoke_contract","","Invokes a contract message.",7,[[["callparams"]],["result"]]],[11,"eval_contract","","Evaluates a contract message and returns its result.",7,[[["callparams"]],["result"]]],[11,"instantiate_contract","","Instantiates another contract.",7,[[["instantiateparams"]],["result"]]],[11,"restore_contract","","Restores a smart contract in tombstone state.",7,[[]]],[11,"terminate_contract","","Terminates the existence of a smart contract.",7,[[]]],[11,"transfer","","Transfers value from the contract to the destination…",7,[[],["result"]]],[11,"random","","Returns a random hash seed.",7,[[]]],[11,"get_runtime_storage","","Returns the value from the runtime storage at the position…",7,[[],[["option",["result"]],["result"]]]],[11,"to_u32","","Converts `self` into an associated `u32` that SRML…",2,[[],["u32"]]],[11,"success","","Creates a return code indicating success.",8,[[],["self"]]],[11,"to_u32","","Returns the `u32` representation of `self`.",8,[[],["u32"]]],[6,"DispatchableFn","","A function with the signature able to handle storage…",null,null],[6,"DispatchableFnMut","","A function with the signature able to handle potentially…",null,null],[6,"EmptyDispatchList","","A simple type definition to view the single unreachable…",null,null],[6,"DispatchResult","","A dispatch result.",null,null],[8,"GenerateAbi","","Types implementing this trait can generate their metadata.",null,null],[10,"generate_abi","","Generates the virtual ABI (metadata).",9,[[],["inkproject"]]],[8,"DispatchUsingMode","","Trait implemented by contracts themselves in order to…",null,null],[10,"dispatch_using_mode","","",10,[[["dispatchmode"]],[["result",["dispatcherror"]],["dispatcherror"]]]],[8,"ForwardCall","","Implemented by contracts that are compiled as dependencies.",null,null],[16,"Forwarder","","The call forwarder that handles `&self` messages.",11,null],[10,"call","","Instantiates a call forwarder to forward `&self` messages.",11,[[]]],[8,"ForwardCallMut","","Implemented by contracts that are compiled as dependencies.",null,null],[16,"Forwarder","","The call forwarder that handles `&mut self` messages.",12,null],[10,"call_mut","","Instantiates a call forwarder to forward `&mut self`…",12,[[]]],[8,"ToAccountId","","Implemented by contracts that are compiled as dependencies.",null,null],[10,"to_account_id","","Returns the underlying account identifier of the…",13,[[["self"]]]],[8,"Dispatch","","Types implementing this trait can handle contract calls.",null,null],[10,"dispatch","","Dispatches the call and returns the call result.",14,[[["s"],["self"],["calldata"]],[["result",["dispatcherror"]],["dispatcherror"]]]],[8,"PushDispatcher","","Types able to push another dispatcher to themselves.",null,null],[10,"push","","",15,[[["d"]],["dispatchlist"]]],[8,"Env","","Allows to directly access the environment mutably.",null,null],[16,"EnvAccess","","The environmental types.",16,null],[10,"env","","Accesses the environment with predefined environmental…",16,[[]]],[8,"InstantiateTestable","","Trait implemented by contracts to make them testable.",null,null],[16,"Wrapped","","The test wrapper for the contract.",17,null],[10,"instantiate","","Creates a testable instantiation of the contract.",17,[[]]],[8,"FnInput","","Dispatchable functions that have inputs.",null,null],[16,"Input","","The tuple-type of all inputs.",18,null],[8,"FnOutput","","Dispatchable functions that have an output.",null,null],[16,"Output","","The output type.",19,null],[8,"FnSelector","","The selector of dispatchable functions.",null,null],[18,"SELECTOR","","The selector.",20,null],[8,"Message","","Types implementing this are messages that may only read…",null,null],[18,"IS_MUT","","",21,null],[8,"Storage","","Types implementing this trait are storage structs.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"dispatch","","",22,[[["s"],["self"],["calldata"]],[["result",["dispatcherror"]],["dispatcherror"]]]],[11,"dispatch","","",4,[[["s"],["self"],["calldata"]],[["result",["dispatcherror"]],["dispatcherror"]]]],[11,"dispatch","","",5,[[["s"],["self"],["calldata"]],[["result",["dispatcherror"]],["dispatcherror"]]]],[11,"dispatch","","",6,[[["s"],["self"],["calldata"]],[["result",["dispatcherror"]],["dispatcherror"]]]],[11,"push","","Creates a dispatch list with `dispatcher` and `self` as…",22,[[["d"]],[["dispatchlist",["unreachabledispatcher"]],["unreachabledispatcher"]]]],[11,"push","","Pushes another dispatcher onto the list.",4,[[["d2"]],["dispatchlist"]]],[11,"from","","",8,[[["dispatcherror"]],["self"]]],[11,"from","","",8,[[["dispatchresult"]],["self"]]],[11,"clone","","",1,[[["self"]],["dispatchmode"]]],[11,"clone","","",22,[[["self"]],["unreachabledispatcher"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["dispatcherror"]]],[11,"clone","","",8,[[["self"]],["dispatchretcode"]]],[11,"default","","",7,[[],["self"]]],[11,"eq","","",1,[[["self"],["dispatchmode"]],["bool"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[18,"SELECTOR","","The selector.",20,null],[18,"IS_MUT","","",21,null]],"p":[[3,"Contract"],[4,"DispatchMode"],[4,"DispatchError"],[3,"ContractBuilder"],[3,"DispatchList"],[3,"Dispatcher"],[3,"DispatcherMut"],[3,"EnvAccess"],[3,"DispatchRetCode"],[8,"GenerateAbi"],[8,"DispatchUsingMode"],[8,"ForwardCall"],[8,"ForwardCallMut"],[8,"ToAccountId"],[8,"Dispatch"],[8,"PushDispatcher"],[8,"Env"],[8,"InstantiateTestable"],[8,"FnInput"],[8,"FnOutput"],[8,"FnSelector"],[8,"Message"],[3,"UnreachableDispatcher"]]};
searchIndex["ink_lang_macro"] = {"doc":"","i":[[23,"contract","ink_lang_macro","",null,null]],"p":[]};
searchIndex["ink_prelude"] = {"doc":"Data structures to operate on contract memory during…","i":[[0,"borrow","ink_prelude","A module for working with borrowed data.",null,null],[8,"ToOwned","ink_prelude::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",0,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",0,[[["self"]]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by…",0,[[["self"]]]],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",1,null],[13,"Owned","","Owned data.",1,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",2,[[["self"]],["borrowed"]]],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",3,[[["self"]],["borrowed"]]],[0,"boxed","ink_prelude","A pointer type for heap allocation.",null,null],[3,"Box","ink_prelude::boxed","A pointer type for heap allocation.",null,null],[14,"format","ink_prelude","Creates a `String` using interpolation of runtime…",null,null],[0,"string","","A UTF-8 encoded, growable string.",null,null],[3,"String","ink_prelude::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a…",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a…",null,null],[6,"ParseError","","A type alias for [`Infallible`].",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",4,[[["self"]],["string"]]],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","ink_prelude","A contiguous growable array type with heap-allocated…",null,null],[3,"Vec","ink_prelude::vec","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[14,"vec","ink_prelude","Creates a [`Vec`] containing the arguments.",null,null],[0,"collections","","Collection types.",null,null],[3,"BinaryHeap","ink_prelude::collections","A priority queue implemented with a binary heap.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring…",null,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",5,null],[13,"Excluded","","An exclusive bound.",5,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",5,null],[0,"hash_map","","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"HashMap","ink_prelude::collections::hash_map","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",null,null],[3,"Keys","","An iterator over the keys of a `HashMap`.",null,null],[3,"Values","","An iterator over the values of a `HashMap`.",null,null],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",null,null],[3,"RawEntryBuilderMut","","A builder for computing where in a HashMap a key-value…",null,null],[4,"RawEntryMut","","A view into a single entry in a map, which may either be…",null,null],[13,"Occupied","","An occupied entry.",6,null],[13,"Vacant","","A vacant entry.",6,null],[3,"RawOccupiedEntryMut","","A view into an occupied entry in a `HashMap`. It is part…",null,null],[3,"RawVacantEntryMut","","A view into a vacant entry in a `HashMap`. It is part of…",null,null],[3,"RawEntryBuilder","","A builder for computing where in a HashMap a key-value…",null,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Occupied","","An occupied entry.",7,null],[13,"Vacant","","A vacant entry.",7,null],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part…",null,null],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of…",null,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",null,null],[0,"hash_set","ink_prelude::collections","A hash set implemented as a `HashMap` where the value is…",null,null],[3,"HashSet","ink_prelude::collections::hash_set","A hash set implemented as a `HashMap` where the value is…",null,null],[3,"Iter","","An iterator over the items of a `HashSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[3,"Drain","","A draining iterator over the items of a `HashSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of…",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of…",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric…",null,null],[3,"Union","","A lazy iterator producing elements in the union of…",null,null],[4,"Bound","ink_prelude::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",5,null],[13,"Excluded","","An exclusive bound.",5,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",5,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","ink_prelude::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest…",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIterSorted","","",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"DrainSorted","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[0,"btree_map","ink_prelude::collections","A map based on a B-Tree.",null,null],[3,"BTreeMap","ink_prelude::collections::btree_map","A map based on a B-Tree.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a…",null,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Vacant","","A vacant entry.",8,null],[13,"Occupied","","An occupied entry.",8,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of…",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part…",null,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[0,"btree_set","ink_prelude::collections","A set based on a B-Tree.",null,null],[3,"Iter","ink_prelude::collections::btree_set","An iterator over the items of a `BTreeSet`.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of…",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric…",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of…",null,null],[3,"Union","","A lazy iterator producing elements in the union of…",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[0,"linked_list","ink_prelude::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","ink_prelude::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"Cursor","","A cursor over a `LinkedList`.",null,null],[3,"CursorMut","","A cursor over a `LinkedList` with editing operations.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on…",null,null],[0,"vec_deque","ink_prelude::collections","A double-ended queue implemented with a growable ring…",null,null],[3,"VecDeque","ink_prelude::collections::vec_deque","A double-ended queue implemented with a growable ring…",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[3,"BTreeMap","ink_prelude::collections","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring…",null,null],[3,"HashMap","","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is…",null,null],[4,"TryReserveError","","The error type for `try_reserve` methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the…",9,null],[13,"AllocError","","The memory allocator returned an error",9,null],[12,"layout","ink_prelude::collections::TryReserveError","The layout of allocation request that failed",10,null],[11,"from","ink_prelude::borrow","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","ink_prelude::boxed","",11,[[],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"into_iter","","",11,[[],["i"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"into_searcher","","",11,[[["str"]],["charpredicatesearcher"]]],[11,"is_contained_in","","",11,[[["str"]],["bool"]]],[11,"is_prefix_of","","",11,[[["str"]],["bool"]]],[11,"is_suffix_of","","",11,[[["str"]],["bool"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","ink_prelude::string","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"into_iter","","",15,[[],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","ink_prelude::vec","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"into_iter","","",16,[[],["i"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"into_iter","","",17,[[],["i"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"into_iter","","",18,[[],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"into_iter","","",19,[[],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"into_iter","","",20,[[],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"into_iter","","",21,[[],["i"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"into_iter","","",22,[[],["i"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"into_iter","","",23,[[],["i"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"into_iter","","",24,[[],["i"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"into_iter","","",25,[[],["i"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"into_iter","","",26,[[],["i"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections::hash_map","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"into_iter","","",27,[[],["i"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"into_iter","","",28,[[],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"into_iter","","",29,[[],["i"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"into_iter","","",30,[[],["i"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"into_iter","","",31,[[],["i"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"into_iter","","",32,[[],["i"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"into_iter","","",33,[[],["i"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"into_iter","","",42,[[],["i"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections::hash_set","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"into_iter","","",43,[[],["i"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"into_iter","","",44,[[],["i"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"into_iter","","",45,[[],["i"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"into_iter","","",46,[[],["i"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"into_iter","","",47,[[],["i"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"into_iter","","",48,[[],["i"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"into_iter","","",49,[[],["i"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections::binary_heap","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"into_iter","","",51,[[],["i"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"into_iter","","",52,[[],["i"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"into_iter","","",53,[[],["i"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"into_iter","","",54,[[],["i"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"into_iter","","",55,[[],["i"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections::btree_map","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"into_iter","","",56,[[],["i"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"into_iter","","",57,[[],["i"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"into_iter","","",58,[[],["i"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"into_iter","","",59,[[],["i"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"into_iter","","",60,[[],["i"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"into_iter","","",61,[[],["i"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"into_iter","","",64,[[],["i"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"into_iter","","",65,[[],["i"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections::btree_set","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"into_iter","","",66,[[],["i"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"into_iter","","",67,[[],["i"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"into_iter","","",68,[[],["i"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"into_iter","","",69,[[],["i"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"into_iter","","",70,[[],["i"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"into_iter","","",71,[[],["i"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"into_iter","","",72,[[],["i"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections::linked_list","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"into_iter","","",73,[[],["i"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"into_iter","","",74,[[],["i"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"into_iter","","",75,[[],["i"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"into_iter","","",78,[[],["i"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections::vec_deque","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"into_iter","","",79,[[],["i"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"into_iter","","",80,[[],["i"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"into_iter","","",81,[[],["i"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,[[["self"],["t"]]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"into_iter","","",82,[[],["i"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"from","ink_prelude::collections","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"to_socket_addrs","ink_prelude::string","",12,[[["self"]],[["intoiter",["socketaddr"]],["error"],["result",["intoiter","error"]]]]],[11,"write","ink_prelude::collections::hash_map","",41,[[["self"]]]],[11,"finish","","",41,[[["self"]],["u64"]]],[11,"fmt","","",37,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_set","",49,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_map","",34,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",36,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_set","",48,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_map","",27,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_set","",46,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_map","",7,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",35,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",29,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",39,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",38,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_set","",44,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections","",26,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",42,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_map","",33,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",6,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",28,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_set","",45,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_map","",41,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",30,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_set","",43,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_map","",31,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",40,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",32,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::hash_set","",47,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"next","","",47,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",47,[[["self"]]]],[11,"next","ink_prelude::collections::hash_map","",33,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",33,[[["self"]]]],[11,"next","","",29,[[["self"]],["option"]]],[11,"size_hint","","",29,[[["self"]]]],[11,"next","","",31,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",31,[[["self"]]]],[11,"next","ink_prelude::collections::hash_set","",43,[[["self"]],[["option"],["k"]]]],[11,"size_hint","","",43,[[["self"]]]],[11,"next","ink_prelude::collections::hash_map","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,[[["self"]]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"size_hint","","",32,[[["self"]]]],[11,"next","ink_prelude::collections::hash_set","",48,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",48,[[["self"]]]],[11,"next","","",49,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",49,[[["self"]]]],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,[[["self"]]]],[11,"next","ink_prelude::collections::hash_map","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,[[["self"]]]],[11,"next","ink_prelude::collections::hash_set","",46,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",46,[[["self"]]]],[11,"next","","",44,[[["self"]],["option"]]],[11,"size_hint","","",44,[[["self"]]]],[11,"next","ink_prelude::collections::hash_map","",30,[[["self"]],[["option"],["k"]]]],[11,"size_hint","","",30,[[["self"]]]],[11,"from","ink_prelude::boxed","Converts a [`str`] into a box of dyn [`Error`].",11,[[["str"]],[["box",["error"]],["error"]]]],[11,"from","","",11,[[["osstr"]],[["box",["osstr"]],["osstr"]]]],[11,"from","ink_prelude::borrow","",1,[[["cstring"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","ink_prelude::boxed","Converts a [`Cow`] into a box of dyn [`Error`].",11,[[["str"],["cow",["str"]]],[["box",["error"]],["error"]]]],[11,"from","ink_prelude::borrow","",1,[[["cstring"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","","",1,[[["pathbuf"]],[["path"],["cow",["path"]]]]],[11,"from","ink_prelude::boxed","Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`]…",11,[[["str"],["cow",["str"]]],[["error"],["box",["error"]]]]],[11,"from","","Converts a type of [`Error`] into a box of dyn [`Error`].",11,[[["e"]],[["error"],["box",["error"]]]]],[11,"from","","",11,[[["path"]],[["path"],["box",["path"]]]]],[11,"from","ink_prelude::borrow","",1,[[["osstring"]],[["osstr"],["cow",["osstr"]]]]],[11,"from","ink_prelude::boxed","",11,[[["cstr"]],[["box",["cstr"]],["cstr"]]]],[11,"from","","Converts a type of [`Error`] + [`Send`] + [`Sync`] into a…",11,[[["e"]],[["error"],["box",["error"]]]]],[11,"from","ink_prelude::borrow","",1,[[["cstr"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","ink_prelude::boxed","Converts a [`String`] into a box of dyn [`Error`].",11,[[["string"]],[["box",["error"]],["error"]]]],[11,"from","ink_prelude::borrow","",1,[[["osstring"]],[["osstr"],["cow",["osstr"]]]]],[11,"from","","",1,[[["pathbuf"]],[["path"],["cow",["path"]]]]],[11,"from","ink_prelude::boxed","Converts a [`str`] into a box of dyn [`Error`] + [`Send`]…",11,[[["str"]],[["error"],["box",["error"]]]]],[11,"from","","Converts a `PathBuf` into a `Box<Path>`",11,[[["pathbuf"]],[["path"],["box",["path"]]]]],[11,"from","","Converts a [`CString`] into a [`Box`]`<CStr>` without…",11,[[["cstring"]],[["box",["cstr"]],["cstr"]]]],[11,"from","ink_prelude::borrow","",1,[[["path"]],[["path"],["cow",["path"]]]]],[11,"from","ink_prelude::boxed","Converts a [`OsString`] into a [`Box`]`<OsStr>` without…",11,[[["osstring"]],[["box",["osstr"]],["osstr"]]]],[11,"from","ink_prelude::borrow","",1,[[["osstr"]],[["osstr"],["cow",["osstr"]]]]],[11,"from","ink_prelude::boxed","Converts a [`String`] into a box of dyn [`Error`] +…",11,[[["string"]],[["box",["error"]],["error"]]]],[11,"from","ink_prelude::vec","Converts a [`CString`] into a [`Vec`]`<u8>`.",16,[[["cstring"]],[["u8"],["vec",["u8"]]]]],[11,"write","","",16,[[["self"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"write_vectored","","",16,[[["self"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"write_all","","",16,[[["self"]],[["error"],["result",["error"]]]]],[11,"flush","","",16,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","ink_prelude::boxed","",11,[[["self"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"write_vectored","","",11,[[["self"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"flush","","",11,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_all","","",11,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","",11,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"partial_cmp","ink_prelude::borrow","",1,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["pathbuf"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["pathbuf"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"eq","","",1,[[["self"],["osstring"]],["bool"]]],[11,"eq","","",1,[[["self"],["pathbuf"]],["bool"]]],[11,"eq","","",1,[[["path"],["self"]],["bool"]]],[11,"eq","","",1,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["path"]],["bool"]]],[11,"eq","","",1,[[["path"],["self"]],["bool"]]],[11,"eq","ink_prelude::collections","",42,[[["self"],["hashset"]],["bool"]]],[11,"eq","ink_prelude::borrow","",1,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["pathbuf"]],["bool"]]],[11,"eq","","",1,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",1,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["path"]],["bool"]]],[11,"eq","","",1,[[["self"],["osstring"]],["bool"]]],[11,"eq","ink_prelude::collections","",26,[[["self"],["hashmap"]],["bool"]]],[11,"read","ink_prelude::boxed","",11,[[["self"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"read_vectored","","",11,[[["self"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"initializer","","",11,[[["self"]],["initializer"]]],[11,"read_to_end","","",11,[[["self"],["vec"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"read_to_string","","",11,[[["self"],["string"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"read_exact","","",11,[[["self"]],[["error"],["result",["error"]]]]],[11,"into_iter","ink_prelude::collections","Creates a consuming iterator, that is, one that moves each…",42,[[],["intoiter"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each…",26,[[],["intoiter"]]],[11,"description","ink_prelude::string","",13,[[["self"]],["str"]]],[11,"description","","",14,[[["self"]],["str"]]],[11,"description","ink_prelude::boxed","",11,[[["self"]],["str"]]],[11,"cause","","",11,[[["self"]],[["error"],["option",["error"]]]]],[11,"source","","",11,[[["self"]],[["option",["error"]],["error"]]]],[11,"extend","ink_prelude::collections","",42,[[["self"],["i"]]]],[11,"extend","","",42,[[["self"],["i"]]]],[11,"extend","","",26,[[["self"],["t"]]]],[11,"extend","","",26,[[["self"],["t"]]]],[11,"clone","ink_prelude::collections::hash_map","",31,[[["self"]],["values"]]],[11,"clone","ink_prelude::boxed","",11,[[["self"]],[["box",["osstr"]],["osstr"]]]],[11,"clone","ink_prelude::collections","",26,[[["self"]],["hashmap"]]],[11,"clone","ink_prelude::collections::hash_set","",47,[[["self"]],["difference"]]],[11,"clone","ink_prelude::collections::hash_map","",30,[[["self"]],["keys"]]],[11,"clone","","",41,[[["self"]],["defaulthasher"]]],[11,"clone","ink_prelude::collections::hash_set","",46,[[["self"]],["intersection"]]],[11,"clone","ink_prelude::collections","",42,[[["self"]],["hashset"]]],[11,"clone","ink_prelude::boxed","",11,[[["self"]],[["path"],["box",["path"]]]]],[11,"clone","ink_prelude::collections::hash_set","",43,[[["self"]],["iter"]]],[11,"clone","ink_prelude::collections::hash_map","",27,[[["self"]],["iter"]]],[11,"clone","","",40,[[["self"]],["randomstate"]]],[11,"clone","ink_prelude::collections::hash_set","",49,[[["self"]],["union"]]],[11,"clone","","",48,[[["self"]],["symmetricdifference"]]],[11,"clone","ink_prelude::boxed","",11,[[["self"]],[["box",["cstr"]],["cstr"]]]],[11,"index","ink_prelude::collections","Returns a reference to the value corresponding to the…",26,[[["self"],["q"]],["v"]]],[11,"from_iter","","",42,[[["i"]],["hashset"]]],[11,"from_iter","","",26,[[["t"]],["hashmap"]]],[11,"build_hasher","ink_prelude::collections::hash_map","",40,[[["self"]],["defaulthasher"]]],[11,"as_ref","ink_prelude::borrow","",1,[[["self"]],["path"]]],[11,"as_ref","ink_prelude::string","",12,[[["self"]],["path"]]],[11,"as_ref","","",12,[[["self"]],["osstr"]]],[11,"len","ink_prelude::collections::hash_map","",27,[[["self"]],["usize"]]],[11,"len","ink_prelude::collections::hash_set","",44,[[["self"]],["usize"]]],[11,"len","","",43,[[["self"]],["usize"]]],[11,"len","ink_prelude::collections::hash_map","",31,[[["self"]],["usize"]]],[11,"len","ink_prelude::collections::hash_set","",45,[[["self"]],["usize"]]],[11,"len","ink_prelude::collections::hash_map","",29,[[["self"]],["usize"]]],[11,"len","","",28,[[["self"]],["usize"]]],[11,"len","","",30,[[["self"]],["usize"]]],[11,"len","","",32,[[["self"]],["usize"]]],[11,"len","","",33,[[["self"]],["usize"]]],[11,"default","ink_prelude::collections","Creates an empty `HashMap<K, V, S>`, with the `Default`…",26,[[],["hashmap"]]],[11,"default","ink_prelude::boxed","",11,[[],[["box",["cstr"]],["cstr"]]]],[11,"default","ink_prelude::collections::hash_map","Constructs a new `RandomState`.",40,[[],["randomstate"]]],[11,"default","","Creates a new `DefaultHasher` using `new`. See its…",41,[[],["defaulthasher"]]],[11,"default","ink_prelude::collections","Creates an empty `HashSet<T, S>` with the `Default` value…",42,[[],["hashset"]]],[11,"default","ink_prelude::boxed","",11,[[],[["box",["osstr"]],["osstr"]]]],[11,"fill_buf","","",11,[[["self"]],[["error"],["result",["error"]]]]],[11,"consume","","",11,[[["self"],["usize"]]]],[11,"read_until","","",11,[[["self"],["vec"],["u8"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"read_line","","",11,[[["self"],["string"]],[["result",["usize","error"]],["usize"],["error"]]]],[11,"seek","","",11,[[["self"],["seekfrom"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"hash","ink_prelude::collections","",5,[[["self"],["__h"]]]],[11,"eq","","",5,[[["bound"],["self"]],["bool"]]],[11,"ne","","",5,[[["bound"],["self"]],["bool"]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"clone","","",5,[[["self"]],["bound"]]],[11,"from_str","ink_prelude::string","",12,[[["str"]],[["string"],["result",["string"]]]]],[11,"add","","",12,[[["str"]],["string"]]],[11,"add","ink_prelude::borrow","",1,[[["str"],["cow",["str"]]]]],[11,"add","","",1,[[["str"]]]],[11,"write_str","ink_prelude::string","",12,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_char","","",12,[[["self"],["char"]],[["error"],["result",["error"]]]]],[11,"finish","ink_prelude::boxed","",11,[[["self"]],["u64"]]],[11,"write","","",11,[[["self"]]]],[11,"write_u8","","",11,[[["self"],["u8"]]]],[11,"write_u16","","",11,[[["u16"],["self"]]]],[11,"write_u32","","",11,[[["self"],["u32"]]]],[11,"write_u64","","",11,[[["self"],["u64"]]]],[11,"write_u128","","",11,[[["self"],["u128"]]]],[11,"write_usize","","",11,[[["self"],["usize"]]]],[11,"write_i8","","",11,[[["self"],["i8"]]]],[11,"write_i16","","",11,[[["self"],["i16"]]]],[11,"write_i32","","",11,[[["self"],["i32"]]]],[11,"write_i64","","",11,[[["i64"],["self"]]]],[11,"write_i128","","",11,[[["self"],["i128"]]]],[11,"write_isize","","",11,[[["isize"],["self"]]]],[11,"fmt","ink_prelude::collections","",22,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",58,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::linked_list","",73,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_set","",71,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections","",25,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",62,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections","",9,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::vec","",16,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::string","",14,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::binary_heap","",50,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",56,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_set","",69,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",72,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::vec","",18,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",17,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::linked_list","",75,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",63,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::vec_deque","",80,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::string","",12,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::linked_list","",74,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",65,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections","",23,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::linked_list","",77,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_set","",66,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",61,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::binary_heap","",55,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::borrow","",1,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::string","",13,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",15,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::vec","",20,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::binary_heap","",52,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::vec_deque","",82,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::linked_list","",78,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections","",24,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::boxed","",11,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",60,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::linked_list","",76,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",57,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::vec","",19,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",64,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections","",21,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::binary_heap","",53,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",54,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::vec_deque","",81,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",79,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_set","",67,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_map","",8,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",59,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::binary_heap","",51,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::collections::btree_set","",68,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",70,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"next","ink_prelude::vec","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,[[["self"]]]],[11,"next","ink_prelude::collections::btree_set","",71,[[["self"]],["option"]]],[11,"size_hint","","",71,[[["self"]]]],[11,"next","","",72,[[["self"]],[["option"],["t"]]]],[11,"last","","",72,[[],[["option"],["t"]]]],[11,"next","ink_prelude::collections::btree_map","",60,[[["self"]],["option"]]],[11,"last","","",60,[[],["option"]]],[11,"next","","",56,[[["self"]],[["option"],["k"]]]],[11,"size_hint","","",56,[[["self"]]]],[11,"last","","",56,[[],[["option"],["k"]]]],[11,"next","ink_prelude::collections::btree_set","",67,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",67,[[["self"]]]],[11,"next","","",69,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",69,[[["self"]]]],[11,"next","ink_prelude::vec","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,[[["self"]]]],[11,"count","","",17,[[],["usize"]]],[11,"next","ink_prelude::string","",15,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",15,[[["self"]]]],[11,"last","","",15,[[],[["option",["char"]],["char"]]]],[11,"next","ink_prelude::collections::binary_heap","",52,[[["self"]],["option"]]],[11,"size_hint","","",52,[[["self"]]]],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,[[["self"]]]],[11,"next","ink_prelude::collections::btree_set","",68,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",68,[[["self"]]]],[11,"next","ink_prelude::collections::btree_map","",59,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",59,[[["self"]]]],[11,"last","","",59,[[],[["option"],["v"]]]],[11,"next","","",64,[[["self"]],["option"]]],[11,"size_hint","","",64,[[["self"]]]],[11,"last","","",64,[[],["option"]]],[11,"next","ink_prelude::vec","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,[[["self"]]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,[[["self"]]]],[11,"next","ink_prelude::collections::linked_list","",74,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",74,[[["self"]]]],[11,"last","","",74,[[],[["option"],["t"]]]],[11,"next","ink_prelude::collections::binary_heap","",53,[[["self"]],["option"]]],[11,"size_hint","","",53,[[["self"]]]],[11,"next","ink_prelude::collections::linked_list","",75,[[["self"]],["option"]]],[11,"size_hint","","",75,[[["self"]]]],[11,"next","ink_prelude::collections::btree_set","",66,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",66,[[["self"]]]],[11,"last","","",66,[[],[["option"],["t"]]]],[11,"next","ink_prelude::collections::vec_deque","",80,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",80,[[["self"]]]],[11,"fold","","",80,[[["acc"],["f"]],["acc"]]],[11,"nth","","",80,[[["self"],["usize"]],["option"]]],[11,"last","","",80,[[],[["option"],["t"]]]],[11,"next","ink_prelude::collections::btree_map","",57,[[["self"]],["option"]]],[11,"size_hint","","",57,[[["self"]]]],[11,"last","","",57,[[],["option"]]],[11,"next","ink_prelude::collections::binary_heap","",51,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",51,[[["self"]]]],[11,"last","","",51,[[],[["option"],["t"]]]],[11,"next","ink_prelude::collections::btree_map","",61,[[["self"]],["option"]]],[11,"last","","",61,[[],["option"]]],[11,"next","ink_prelude::collections::linked_list","",73,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",73,[[["self"]]]],[11,"last","","",73,[[],[["option"],["t"]]]],[11,"next","ink_prelude::collections::vec_deque","",79,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",79,[[["self"]]]],[11,"fold","","",79,[[["acc"],["f"]],["acc"]]],[11,"try_fold","","",79,[[["self"],["b"],["f"]],["r"]]],[11,"nth","","",79,[[["self"],["usize"]],["option"]]],[11,"last","","",79,[[],[["option"],["t"]]]],[11,"next","","",81,[[["self"]],["option"]]],[11,"size_hint","","",81,[[["self"]]]],[11,"next","ink_prelude::collections::btree_map","",58,[[["self"]],["option"]]],[11,"size_hint","","",58,[[["self"]]]],[11,"next","ink_prelude::boxed","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,[[["self"]]]],[11,"nth","","",11,[[["self"],["usize"]],["option"]]],[11,"last","","",11,[[],["option"]]],[11,"next","ink_prelude::collections::vec_deque","",82,[[["self"]],["option"]]],[11,"size_hint","","",82,[[["self"]]]],[11,"next","ink_prelude::collections::binary_heap","",54,[[["self"]],["option"]]],[11,"size_hint","","",54,[[["self"]]]],[11,"next","ink_prelude::collections::btree_set","",70,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",70,[[["self"]]]],[11,"next","ink_prelude::collections::linked_list","",78,[[["self"]],["option"]]],[11,"size_hint","","",78,[[["self"]]]],[11,"next","ink_prelude::collections::btree_map","",65,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",65,[[["self"]]]],[11,"last","","",65,[[],[["option"],["v"]]]],[11,"deref_mut","ink_prelude::string","",12,[[["self"]],["str"]]],[11,"deref_mut","ink_prelude::collections::binary_heap","",50,[[["self"]],["t"]]],[11,"deref_mut","ink_prelude::vec","",16,[[["self"]]]],[11,"deref_mut","ink_prelude::boxed","",11,[[["self"]],["t"]]],[11,"poll","","",11,[[["pin",["box"]],["context"],["box"]],["poll"]]],[11,"from","ink_prelude::vec","",16,[[],["vec"]]],[11,"from","","",16,[[["cow"]],["vec"]]],[11,"from","ink_prelude::borrow","",1,[[["vec"]],["cow"]]],[11,"from","ink_prelude::string","Converts the given boxed `str` slice to a `String`. It is…",12,[[["box",["str"]],["str"]],["string"]]],[11,"from","ink_prelude::borrow","",1,[[["vec"]],["cow"]]],[11,"from","","",1,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","ink_prelude::collections","Turn a [`Vec<T>`] into a [`VecDeque<T>`].",25,[[["vec"]],["vecdeque"]]],[11,"from","ink_prelude::vec","Converts the given `String` to a vector `Vec` that holds…",16,[[["string"]],[["u8"],["vec",["u8"]]]]],[11,"from","ink_prelude::borrow","",1,[[],["cow"]]],[11,"from","ink_prelude::string","",12,[[["str"],["cow",["str"]]],["string"]]],[11,"from","","",12,[[["str"]],["string"]]],[11,"from","ink_prelude::boxed","Converts the given `String` to a boxed `str` slice that is…",11,[[["string"]],[["box",["str"]],["str"]]]],[11,"from","ink_prelude::vec","",16,[[],["vec"]]],[11,"from","ink_prelude::collections","Converts a `Vec<T>` into a `BinaryHeap<T>`.",21,[[["vec"]],["binaryheap"]]],[11,"from","ink_prelude::vec","",16,[[["box"]],["vec"]]],[11,"from","ink_prelude::boxed","",11,[[["vec"]],["box"]]],[11,"from","ink_prelude::borrow","",1,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","ink_prelude::vec","",16,[[["str"]],[["u8"],["vec",["u8"]]]]],[11,"from","ink_prelude::string","",12,[[["string"]],["string"]]],[11,"from","ink_prelude::vec","Turn a [`VecDeque<T>`] into a [`Vec<T>`].",16,[[["vecdeque"]],["vec"]]],[11,"from","","",16,[[["binaryheap"]],["vec"]]],[11,"from","ink_prelude::borrow","",1,[[["str"]],[["str"],["cow",["str"]]]]],[11,"from","ink_prelude::boxed","Converts a generic type `T` into a `Box<T>`",11,[[["t"]],["box"]]],[11,"from","","Converts a `&str` into a `Box<str>`",11,[[["str"]],[["box",["str"]],["str"]]]],[11,"from","","Converts a `Box<str>>` into a `Box<[u8]>`",11,[[["box",["str"]],["str"]],["box"]]],[11,"from","ink_prelude::collections","",9,[[["layouterr"]],["tryreserveerror"]]],[11,"from","ink_prelude::boxed","Converts a `&[T]` into a `Box<[T]>`",11,[[],["box"]]],[11,"as_mut","ink_prelude::vec","",16,[[["self"]]]],[11,"as_mut","","",16,[[["self"]],["vec"]]],[11,"as_mut","ink_prelude::string","",12,[[["self"]],["str"]]],[11,"as_mut","ink_prelude::boxed","",11,[[["self"]],["t"]]],[11,"add_assign","ink_prelude::borrow","",1,[[["self"],["str"]]]],[11,"add_assign","","",1,[[["str"],["self"],["cow",["str"]]]]],[11,"add_assign","ink_prelude::string","",12,[[["str"],["self"]]]],[11,"partial_cmp","ink_prelude::borrow","",1,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","ink_prelude::vec","",16,[[["vec"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","ink_prelude::string","",12,[[["string"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",12,[[["string"],["self"]],["bool"]]],[11,"le","","",12,[[["string"],["self"]],["bool"]]],[11,"gt","","",12,[[["string"],["self"]],["bool"]]],[11,"ge","","",12,[[["string"],["self"]],["bool"]]],[11,"partial_cmp","ink_prelude::collections","",24,[[["self"],["linkedlist"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",22,[[["btreemap"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",25,[[["self"],["vecdeque"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","ink_prelude::boxed","",11,[[["box"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",11,[[["box"],["self"]],["bool"]]],[11,"le","","",11,[[["box"],["self"]],["bool"]]],[11,"ge","","",11,[[["box"],["self"]],["bool"]]],[11,"gt","","",11,[[["box"],["self"]],["bool"]]],[11,"partial_cmp","ink_prelude::collections","",23,[[["self"],["btreeset"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",23,[[["self"],["btreeset"]],["bool"]]],[11,"le","","",23,[[["self"],["btreeset"]],["bool"]]],[11,"gt","","",23,[[["self"],["btreeset"]],["bool"]]],[11,"ge","","",23,[[["self"],["btreeset"]],["bool"]]],[11,"call","ink_prelude::boxed","",11,[[["a"],["self"]]]],[11,"fmt","","",11,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"next_back","ink_prelude::collections::linked_list","",75,[[["self"]],["option"]]],[11,"next_back","ink_prelude::collections::vec_deque","",80,[[["self"]],[["option"],["t"]]]],[11,"rfold","","",80,[[["acc"],["f"]],["acc"]]],[11,"next_back","ink_prelude::vec","",19,[[["self"]],["option"]]],[11,"next_back","ink_prelude::collections::btree_map","",57,[[["self"]],["option"]]],[11,"next_back","ink_prelude::vec","",18,[[["self"]],["option"]]],[11,"next_back","ink_prelude::collections::btree_map","",61,[[["self"]],["option"]]],[11,"next_back","","",56,[[["self"]],[["option"],["k"]]]],[11,"next_back","ink_prelude::collections::binary_heap","",51,[[["self"]],[["option"],["t"]]]],[11,"next_back","ink_prelude::collections::vec_deque","",82,[[["self"]],["option"]]],[11,"next_back","ink_prelude::collections::binary_heap","",54,[[["self"]],["option"]]],[11,"next_back","ink_prelude::collections::btree_map","",58,[[["self"]],["option"]]],[11,"next_back","ink_prelude::vec","",17,[[["self"]],["option"]]],[11,"next_back","ink_prelude::collections::btree_map","",59,[[["self"]],[["option"],["v"]]]],[11,"next_back","","",60,[[["self"]],["option"]]],[11,"next_back","ink_prelude::collections::vec_deque","",79,[[["self"]],[["option"],["t"]]]],[11,"rfold","","",79,[[["acc"],["f"]],["acc"]]],[11,"try_rfold","","",79,[[["self"],["b"],["f"]],["r"]]],[11,"next_back","ink_prelude::collections::linked_list","",73,[[["self"]],[["option"],["t"]]]],[11,"next_back","","",74,[[["self"]],[["option"],["t"]]]],[11,"next_back","ink_prelude::collections::btree_map","",65,[[["self"]],[["option"],["v"]]]],[11,"next_back","ink_prelude::collections::btree_set","",66,[[["self"]],[["option"],["t"]]]],[11,"next_back","ink_prelude::boxed","",11,[[["self"]],["option"]]],[11,"nth_back","","",11,[[["self"],["usize"]],["option"]]],[11,"next_back","ink_prelude::collections::vec_deque","",81,[[["self"]],["option"]]],[11,"next_back","ink_prelude::collections::binary_heap","",52,[[["self"]],["option"]]],[11,"next_back","ink_prelude::collections::btree_set","",71,[[["self"]],["option"]]],[11,"next_back","ink_prelude::string","",15,[[["self"]],[["option",["char"]],["char"]]]],[11,"next_back","ink_prelude::collections::btree_set","",72,[[["self"]],[["option"],["t"]]]],[11,"next_back","ink_prelude::collections::btree_map","",64,[[["self"]],["option"]]],[11,"eq","ink_prelude::borrow","",1,[[["string"],["self"]],["bool"]]],[11,"ne","","",1,[[["string"],["self"]],["bool"]]],[11,"eq","ink_prelude::string","",12,[[["str"],["self"]],["bool"]]],[11,"ne","","",12,[[["str"],["self"]],["bool"]]],[11,"eq","ink_prelude::borrow","",1,[[["self"]],["bool"]]],[11,"ne","","",1,[[["self"]],["bool"]]],[11,"eq","ink_prelude::vec","",16,[[["self"]],["bool"]]],[11,"ne","","",16,[[["self"]],["bool"]]],[11,"eq","ink_prelude::borrow","",1,[[["str"],["self"]],["bool"]]],[11,"ne","","",1,[[["str"],["self"]],["bool"]]],[11,"eq","ink_prelude::collections","",25,[[["self"]],["bool"]]],[11,"eq","","",23,[[["self"],["btreeset"]],["bool"]]],[11,"ne","","",23,[[["self"],["btreeset"]],["bool"]]],[11,"eq","","",25,[[["self"]],["bool"]]],[11,"eq","","",25,[[["self"]],["bool"]]],[11,"eq","","",24,[[["self"],["linkedlist"]],["bool"]]],[11,"ne","","",24,[[["self"],["linkedlist"]],["bool"]]],[11,"eq","","",25,[[["self"],["vec"]],["bool"]]],[11,"eq","ink_prelude::borrow","",1,[[["str"],["self"]],["bool"]]],[11,"ne","","",1,[[["str"],["self"]],["bool"]]],[11,"eq","ink_prelude::vec","",16,[[["self"]],["bool"]]],[11,"ne","","",16,[[["self"]],["bool"]]],[11,"eq","ink_prelude::borrow","",1,[[["self"],["vec"]],["bool"]]],[11,"ne","","",1,[[["self"],["vec"]],["bool"]]],[11,"eq","ink_prelude::collections","",25,[[["self"]],["bool"]]],[11,"eq","ink_prelude::string","",12,[[["string"],["self"]],["bool"]]],[11,"ne","","",12,[[["string"],["self"]],["bool"]]],[11,"eq","ink_prelude::collections","",25,[[["self"],["vecdeque"]],["bool"]]],[11,"eq","ink_prelude::vec","",16,[[["self"]],["bool"]]],[11,"ne","","",16,[[["self"]],["bool"]]],[11,"eq","","",16,[[["self"]],["bool"]]],[11,"ne","","",16,[[["self"]],["bool"]]],[11,"eq","ink_prelude::string","",12,[[["str"],["self"]],["bool"]]],[11,"ne","","",12,[[["str"],["self"]],["bool"]]],[11,"eq","ink_prelude::collections","",9,[[["tryreserveerror"],["self"]],["bool"]]],[11,"ne","","",9,[[["tryreserveerror"],["self"]],["bool"]]],[11,"eq","","",22,[[["btreemap"],["self"]],["bool"]]],[11,"eq","ink_prelude::string","",13,[[["fromutf8error"],["self"]],["bool"]]],[11,"ne","","",13,[[["fromutf8error"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["cow"]],["bool"]]],[11,"ne","","",12,[[["self"],["cow"]],["bool"]]],[11,"eq","ink_prelude::collections","",25,[[["self"]],["bool"]]],[11,"eq","ink_prelude::boxed","",11,[[["box"],["self"]],["bool"]]],[11,"ne","","",11,[[["box"],["self"]],["bool"]]],[11,"eq","ink_prelude::borrow","",1,[[["self"]],["bool"]]],[11,"ne","","",1,[[["self"]],["bool"]]],[11,"eq","ink_prelude::vec","",16,[[["self"],["vec"]],["bool"]]],[11,"ne","","",16,[[["self"],["vec"]],["bool"]]],[11,"eq","ink_prelude::borrow","",1,[[["cow"],["self"]],["bool"]]],[11,"call_once","ink_prelude::boxed","",11,[[["a"]]]],[11,"index_mut","ink_prelude::string","",12,[[["self"],["usize"],["rangefrom",["usize"]]],["str"]]],[11,"index_mut","ink_prelude::collections","",25,[[["self"],["usize"]],["a"]]],[11,"index_mut","ink_prelude::string","",12,[[["self"],["rangefull"]],["str"]]],[11,"index_mut","","",12,[[["self"],["usize"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index_mut","","",12,[[["range",["usize"]],["self"],["usize"]],["str"]]],[11,"index_mut","ink_prelude::vec","",16,[[["self"],["i"]]]],[11,"index_mut","ink_prelude::string","",12,[[["self"],["rangeinclusive",["usize"]],["usize"]],["str"]]],[11,"index_mut","","",12,[[["rangeto",["usize"]],["self"],["usize"]],["str"]]],[11,"try_from","ink_prelude::boxed","",11,[[["box"]],[["result",["box"]],["box"]]]],[11,"into_iter","ink_prelude::collections","Creates a consuming iterator, that is, one that moves each…",21,[[],["intoiter"]]],[11,"into_iter","","",22,[[],["intoiter"]]],[11,"into_iter","ink_prelude::vec","Creates a consuming iterator, that is, one that moves each…",16,[[],["intoiter"]]],[11,"into_iter","ink_prelude::collections","Gets an iterator for moving out the `BTreeSet`'s contents.",23,[[],["intoiter"]]],[11,"into_iter","","Consumes the list into an iterator yielding elements by…",24,[[],["intoiter"]]],[11,"into_iter","","Consumes the `VecDeque` into a front-to-back iterator…",25,[[],["intoiter"]]],[11,"call_mut","ink_prelude::boxed","",11,[[["a"],["self"]]]],[11,"borrow_mut","ink_prelude::string","",12,[[["self"]],["str"]]],[11,"borrow_mut","ink_prelude::vec","",16,[[["self"]]]],[11,"borrow_mut","ink_prelude::boxed","",11,[[["self"]],["t"]]],[11,"extend","ink_prelude::collections","",24,[[["self"],["i"]]]],[11,"extend","","",25,[[["self"],["i"]]]],[11,"extend","","",21,[[["self"],["i"]]]],[11,"extend","ink_prelude::vec","",16,[[["self"],["i"]]]],[11,"extend","ink_prelude::collections","",23,[[["self"],["i"]]]],[11,"extend","ink_prelude::vec","",16,[[["self"],["i"]]]],[11,"extend","ink_prelude::string","",12,[[["self"],["i"]]]],[11,"extend","","",12,[[["self"],["i"]]]],[11,"extend","ink_prelude::collections","",23,[[["self"],["iter"]]]],[11,"extend","ink_prelude::string","",12,[[["self"],["i"]]]],[11,"extend","ink_prelude::collections","",25,[[["self"],["t"]]]],[11,"extend","","",24,[[["self"],["i"]]]],[11,"extend","","",21,[[["self"],["i"]]]],[11,"extend","ink_prelude::string","",12,[[["self"],["i"]]]],[11,"extend","ink_prelude::collections","",22,[[["self"],["i"]]]],[11,"extend","","",22,[[["self"],["t"]]]],[11,"extend","ink_prelude::string","",12,[[["self"],["i"]]]],[11,"clone","ink_prelude::collections::btree_set","",69,[[["self"]],["intersection"]]],[11,"clone","ink_prelude::boxed","",11,[[["self"]],["box"]]],[11,"clone","ink_prelude::collections","",24,[[["self"]],["linkedlist"]]],[11,"clone_from","","",24,[[["self"],["linkedlist"]]]],[11,"clone","","",23,[[["self"]],["btreeset"]]],[11,"clone_from","","",23,[[["self"],["btreeset"]]]],[11,"clone","ink_prelude::vec","",16,[[["self"]],["vec"]]],[11,"clone_from","","",16,[[["self"],["vec"]]]],[11,"clone","ink_prelude::boxed","",11,[[["self"]],[["box",["str"]],["str"]]]],[11,"clone","ink_prelude::string","",13,[[["self"]],["fromutf8error"]]],[11,"clone","ink_prelude::collections","",9,[[["self"]],["tryreserveerror"]]],[11,"clone","ink_prelude::collections::binary_heap","",53,[[["self"]],["intoitersorted"]]],[11,"clone","","",52,[[["self"]],["intoiter"]]],[11,"clone","ink_prelude::collections::btree_set","",66,[[["self"]],["iter"]]],[11,"clone","","",67,[[["self"]],["difference"]]],[11,"clone","ink_prelude::collections::linked_list","",75,[[["self"]],["intoiter"]]],[11,"clone","ink_prelude::borrow","",1,[[["self"]],["cow"]]],[11,"clone_from","","",1,[[["self"],["cow"]]]],[11,"clone","ink_prelude::boxed","Returns a new box with a `clone()` of this box's contents.",11,[[["self"]],["box"]]],[11,"clone_from","","Copies `source`'s contents into `self` without creating a…",11,[[["self"],["box"]]]],[11,"clone","ink_prelude::collections::linked_list","",73,[[["self"]],["iter"]]],[11,"clone","ink_prelude::vec","",17,[[["self"]],["intoiter"]]],[11,"clone","ink_prelude::collections::btree_map","",59,[[["self"]],["values"]]],[11,"clone","","",56,[[["self"]],["keys"]]],[11,"clone","","",60,[[["self"]],["range"]]],[11,"clone","ink_prelude::collections::btree_set","",70,[[["self"]],["union"]]],[11,"clone","ink_prelude::collections","",21,[[["self"]],["binaryheap"]]],[11,"clone_from","","",21,[[["self"],["binaryheap"]]]],[11,"clone","ink_prelude::collections::vec_deque","",79,[[["self"]],["iter"]]],[11,"clone","ink_prelude::collections::btree_map","",57,[[["self"]],["iter"]]],[11,"clone","ink_prelude::collections","",25,[[["self"]],["vecdeque"]]],[11,"clone_from","","",25,[[["vecdeque"],["self"]]]],[11,"clone","","",22,[[["self"]],["btreemap"]]],[11,"clone_from","","",22,[[["self"],["btreemap"]]]],[11,"clone","ink_prelude::collections::binary_heap","",51,[[["self"]],["iter"]]],[11,"clone","ink_prelude::collections::btree_set","",68,[[["self"]],["symmetricdifference"]]],[11,"clone","","",72,[[["self"]],["range"]]],[11,"clone","ink_prelude::collections::vec_deque","",81,[[["self"]],["intoiter"]]],[11,"clone","ink_prelude::string","",12,[[["self"]],["string"]]],[11,"clone_from","","",12,[[["self"],["string"]]]],[11,"hash","ink_prelude::vec","",16,[[["self"],["h"]]]],[11,"hash","ink_prelude::string","",12,[[["self"],["h"]]]],[11,"hash","ink_prelude::borrow","",1,[[["self"],["h"]]]],[11,"hash","ink_prelude::collections","",25,[[["self"],["h"]]]],[11,"hash","","",22,[[["self"],["h"]]]],[11,"hash","","",23,[[["self"],["__h"]]]],[11,"hash","","",24,[[["self"],["h"]]]],[11,"hash","ink_prelude::boxed","",11,[[["self"],["h"]]]],[11,"drop","ink_prelude::vec","",17,[[["self"]]]],[11,"drop","ink_prelude::collections","",22,[[["self"]]]],[11,"drop","ink_prelude::vec","",16,[[["self"]]]],[11,"drop","ink_prelude::collections","",25,[[["self"]]]],[11,"drop","ink_prelude::collections::linked_list","",78,[[["self"]]]],[11,"drop","ink_prelude::collections::btree_map","",58,[[["self"]]]],[11,"drop","ink_prelude::vec","",19,[[["self"]]]],[11,"drop","","",20,[[["self"]]]],[11,"drop","ink_prelude::collections","",24,[[["self"]]]],[11,"drop","ink_prelude::string","",15,[[["self"]]]],[11,"drop","ink_prelude::vec","",18,[[["self"]]]],[11,"drop","ink_prelude::collections::vec_deque","",82,[[["self"]]]],[11,"drop","ink_prelude::boxed","",11,[[["self"]]]],[11,"drop","ink_prelude::collections::binary_heap","",50,[[["self"]]]],[11,"drop","","Removes heap elements in heap order.",55,[[["self"]]]],[11,"resume","ink_prelude::boxed","",11,[[["pin",["box"]],["box"],["r"]],["generatorstate"]]],[11,"index","ink_prelude::string","",12,[[["rangefrom",["usize"]],["self"],["usize"]],["str"]]],[11,"index","ink_prelude::collections","Returns a reference to the value corresponding to the…",22,[[["self"],["q"]],["v"]]],[11,"index","ink_prelude::string","",12,[[["rangeto",["usize"]],["self"],["usize"]],["str"]]],[11,"index","","",12,[[["rangeinclusive",["usize"]],["self"],["usize"]],["str"]]],[11,"index","","",12,[[["rangetoinclusive",["usize"]],["self"],["usize"]],["str"]]],[11,"index","","",12,[[["range",["usize"]],["self"],["usize"]],["str"]]],[11,"index","ink_prelude::collections","",25,[[["self"],["usize"]],["a"]]],[11,"index","ink_prelude::string","",12,[[["rangefull"],["self"]],["str"]]],[11,"index","ink_prelude::vec","",16,[[["i"],["self"]]]],[11,"deref","ink_prelude::borrow","",1,[[["self"]],["b"]]],[11,"deref","ink_prelude::boxed","",11,[[["self"]],["t"]]],[11,"deref","ink_prelude::collections::binary_heap","",50,[[["self"]],["t"]]],[11,"deref","ink_prelude::vec","",16,[[["self"]]]],[11,"deref","ink_prelude::string","",12,[[["self"]],["str"]]],[11,"from_iter","ink_prelude::borrow","",1,[[["i"]],["cow"]]],[11,"from_iter","ink_prelude::collections","",24,[[["i"]],["linkedlist"]]],[11,"from_iter","ink_prelude::borrow","",1,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","ink_prelude::string","",12,[[["i"]],["string"]]],[11,"from_iter","ink_prelude::borrow","",1,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","ink_prelude::collections","",21,[[["i"]],["binaryheap"]]],[11,"from_iter","ink_prelude::string","",12,[[["i"]],["string"]]],[11,"from_iter","ink_prelude::collections","",25,[[["t"]],["vecdeque"]]],[11,"from_iter","ink_prelude::borrow","",1,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","ink_prelude::string","",12,[[["i"]],["string"]]],[11,"from_iter","ink_prelude::collections","",23,[[["i"]],["btreeset"]]],[11,"from_iter","ink_prelude::string","",12,[[["i"]],["string"]]],[11,"from_iter","ink_prelude::vec","",16,[[["i"]],["vec"]]],[11,"from_iter","ink_prelude::collections","",22,[[["t"]],["btreemap"]]],[11,"from_iter","ink_prelude::string","",12,[[["i"]],["string"]]],[11,"from_iter","ink_prelude::boxed","",11,[[["t"]],["box"]]],[11,"cmp","ink_prelude::string","",12,[[["string"],["self"]],["ordering"]]],[11,"cmp","ink_prelude::collections","",24,[[["self"],["linkedlist"]],["ordering"]]],[11,"cmp","ink_prelude::borrow","",1,[[["self"],["cow"]],["ordering"]]],[11,"cmp","ink_prelude::collections","",22,[[["btreemap"],["self"]],["ordering"]]],[11,"cmp","","",25,[[["self"],["vecdeque"]],["ordering"]]],[11,"cmp","ink_prelude::vec","",16,[[["vec"],["self"]],["ordering"]]],[11,"cmp","ink_prelude::collections","",23,[[["self"],["btreeset"]],["ordering"]]],[11,"cmp","ink_prelude::boxed","",11,[[["box"],["self"]],["ordering"]]],[11,"as_ref","ink_prelude::string","",12,[[["self"]],["str"]]],[11,"as_ref","ink_prelude::vec","",16,[[["self"]]]],[11,"as_ref","ink_prelude::boxed","",11,[[["self"]],["t"]]],[11,"as_ref","ink_prelude::borrow","",1,[[["self"]],["t"]]],[11,"as_ref","ink_prelude::string","",12,[[["self"]]]],[11,"as_ref","ink_prelude::vec","",16,[[["self"]],["vec"]]],[11,"len","ink_prelude::collections::btree_map","",56,[[["self"]],["usize"]]],[11,"len","ink_prelude::boxed","",11,[[["self"]],["usize"]]],[11,"is_empty","","",11,[[["self"]],["bool"]]],[11,"len","ink_prelude::collections::btree_map","",65,[[["self"]],["usize"]]],[11,"is_empty","ink_prelude::vec","",17,[[["self"]],["bool"]]],[11,"len","ink_prelude::collections::btree_set","",71,[[["self"]],["usize"]]],[11,"len","ink_prelude::collections::btree_map","",58,[[["self"]],["usize"]]],[11,"len","","",64,[[["self"]],["usize"]]],[11,"len","","",59,[[["self"]],["usize"]]],[11,"is_empty","ink_prelude::collections::binary_heap","",54,[[["self"]],["bool"]]],[11,"len","ink_prelude::collections::btree_set","",66,[[["self"]],["usize"]]],[11,"is_empty","ink_prelude::collections::binary_heap","",52,[[["self"]],["bool"]]],[11,"is_empty","ink_prelude::collections::vec_deque","",80,[[["self"]],["bool"]]],[11,"is_empty","ink_prelude::collections::binary_heap","",51,[[["self"]],["bool"]]],[11,"is_empty","ink_prelude::collections::vec_deque","",81,[[["self"]],["bool"]]],[11,"is_empty","ink_prelude::vec","",18,[[["self"]],["bool"]]],[11,"is_empty","ink_prelude::collections::vec_deque","",79,[[["self"]],["bool"]]],[11,"len","ink_prelude::collections::btree_map","",57,[[["self"]],["usize"]]],[11,"default","ink_prelude::boxed","",11,[[],[["box",["str"]],["str"]]]],[11,"default","ink_prelude::borrow","Creates an owned Cow<'a, B> with the default value for the…",1,[[],["cow"]]],[11,"default","ink_prelude::string","Creates an empty `String`.",12,[[],["string"]]],[11,"default","ink_prelude::boxed","Creates a `Box<T>`, with the `Default` value for T.",11,[[],["box"]]],[11,"default","ink_prelude::collections","Creates an empty `VecDeque<T>`.",25,[[],["vecdeque"]]],[11,"default","","Creates an empty `BTreeMap<K, V>`.",22,[[],["btreemap"]]],[11,"default","","Creates an empty `BinaryHeap<T>`.",21,[[],["binaryheap"]]],[11,"default","","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",23,[[],["btreeset"]]],[11,"default","","Creates an empty `LinkedList<T>`.",24,[[],["linkedlist"]]],[11,"default","ink_prelude::boxed","",11,[[],["box"]]],[11,"default","ink_prelude::vec","Creates an empty `Vec<T>`.",16,[[],["vec"]]],[11,"to_string","ink_prelude::borrow","",1,[[["self"]],["string"]]],[11,"to_string","ink_prelude::string","",12,[[["self"]],["string"]]],[11,"fmt","","",13,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::borrow","",1,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::string","",14,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::boxed","",11,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","ink_prelude::string","",12,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"borrow","ink_prelude::borrow","",1,[[["self"]],["b"]]],[11,"borrow","ink_prelude::boxed","",11,[[["self"]],["t"]]],[11,"borrow","ink_prelude::string","",12,[[["self"]],["str"]]],[11,"borrow","ink_prelude::vec","",16,[[["self"]]]],[11,"is_borrowed","ink_prelude::borrow","Returns true if the data is borrowed, i.e. if `to_mut`…",1,[[["self"]],["bool"]]],[11,"is_owned","","Returns true if the data is owned, i.e. if `to_mut` would…",1,[[["self"]],["bool"]]],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",1,[[["self"]]]],[11,"into_owned","","Extracts the owned data.",1,[[]]],[11,"new","ink_prelude::boxed","Allocates memory on the heap and then places `x` into it.",11,[[["t"]],["box"]]],[11,"new_uninit","","Constructs a new box with uninitialized contents.",11,[[],[["box",["maybeuninit"]],["maybeuninit"]]]],[11,"new_zeroed","","Constructs a new `Box` with uninitialized contents, with…",11,[[],[["box",["maybeuninit"]],["maybeuninit"]]]],[11,"pin","","Constructs a new `Pin<Box<T>>`. If `T` does not implement…",11,[[["t"]],[["pin",["box"]],["box"]]]],[11,"new_uninit_slice","","Constructs a new boxed slice with uninitialized contents.",11,[[["usize"]],["box"]]],[11,"assume_init","","Converts to `Box<T>`.",11,[[],["box"]]],[11,"assume_init","","Converts to `Box<[T]>`.",11,[[],["box"]]],[11,"from_raw","","Constructs a box from a raw pointer.",11,[[],["box"]]],[11,"into_raw","","Consumes the `Box`, returning a wrapped raw pointer.",11,[[["box"]]]],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as…",11,[[["box"]],["nonnull"]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable…",11,[[["box"]],["t"]]],[11,"into_pin","","Converts a `Box<T>` into a `Pin<Box<T>>`",11,[[["box"]],[["pin",["box"]],["box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,[[],[["box",["any"]],["result",["box","box"]],["box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,[[],[["result",["box","box"]],["box",["any"]],["box"]]]],[11,"new","ink_prelude::string","Creates a new empty `String`.",12,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",12,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",12,[[["vec",["u8"]],["u8"]],[["string"],["fromutf8error"],["result",["string","fromutf8error"]]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid…",12,[[],[["str"],["cow",["str"]]]]],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`,…",12,[[],[["string"],["fromutf16error"],["result",["string","fromutf16error"]]]]],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`,…",12,[[],["string"]]],[11,"into_raw_parts","","Decomposes a `String` into its raw components.",12,[[]]],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",12,[[["usize"]],["string"]]],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking…",12,[[["vec",["u8"]],["u8"]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",12,[[],[["u8"],["vec",["u8"]]]]],[11,"as_str","","Extracts a string slice containing the entire `String`.",12,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",12,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",12,[[["str"],["self"]]]],[11,"capacity","","Returns this `String`'s capacity, in bytes.",12,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least…",12,[[["self"],["usize"]]]],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional`…",12,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",12,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",12,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",12,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",12,[[["self"],["usize"]]]],[11,"push","","Appends the given [`char`] to the end of this `String`.",12,[[["self"],["char"]]]],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",12,[[["self"]]]],[11,"truncate","","Shortens this `String` to the specified length.",12,[[["self"],["usize"]]]],[11,"pop","","Removes the last character from the string buffer and…",12,[[["self"]],[["option",["char"]],["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position…",12,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",12,[[["self"],["f"]]]],[11,"insert","","Inserts a character into this `String` at a byte position.",12,[[["self"],["usize"],["char"]]]],[11,"insert_str","","Inserts a string slice into this `String` at a byte…",12,[[["str"],["self"],["usize"]]]],[11,"as_mut_vec","","Returns a mutable reference to the contents of this…",12,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes, not…",12,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero, and…",12,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",12,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",12,[[["self"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",12,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it…",12,[[["str"],["self"],["r"]]]],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",12,[[],[["box",["str"]],["str"]]]],[11,"as_bytes","","Returns a slice of [`u8`]s bytes that were attempted to…",13,[[["self"]]]],[11,"into_bytes","","Returns the bytes that were attempted to convert to a…",13,[[],[["u8"],["vec",["u8"]]]]],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the…",13,[[["self"]],["utf8error"]]],[11,"new","ink_prelude::vec","Constructs a new, empty `Vec<T>`.",16,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified…",16,[[["usize"]],["vec"]]],[11,"into_raw_parts","","Decomposes a `Vec<T>` into its raw components.",16,[[]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of…",16,[[["usize"]],["vec"]]],[11,"capacity","","Returns the number of elements the vector can hold without…",16,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",16,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",16,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",16,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",16,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",16,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",16,[[["self"],["usize"]]]],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",16,[[],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and…",16,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",16,[[["self"]]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",16,[[["self"]]]],[11,"as_ptr","","Returns a raw pointer to the vector's buffer.",16,[[["self"]]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector's buffer.",16,[[["self"]]]],[11,"set_len","","Forces the length of the vector to `new_len`.",16,[[["self"],["usize"]]]],[11,"swap_remove","","Removes an element from the vector and returns it.",16,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector,…",16,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at position `index` within…",16,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",16,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the…",16,[[["self"],["f"]]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the…",16,[[["self"],["f"]]]],[11,"push","","Appends an element to the back of a collection.",16,[[["self"],["t"]]]],[11,"pop","","Removes the last element from a vector and returns it, or…",16,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving…",16,[[["vec"],["self"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",16,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",16,[[["self"]]]],[11,"len","","Returns the number of elements in the vector, also…",16,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",16,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",16,[[["self"],["usize"]],["vec"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to…",16,[[["self"],["usize"],["f"]]]],[11,"leak","","Consumes and leaks the `Vec`, returning a mutable…",16,[[["vec"]]]],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to…",16,[[["self"],["usize"],["t"]]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",16,[[["self"]]]],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to…",16,[[["self"],["usize"]]]],[11,"dedup","","Removes consecutive repeated elements in the vector…",16,[[["self"]]]],[11,"remove_item","","Removes the first instance of `item` from the vector if…",16,[[["self"],["v"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified…",16,[[["self"],["i"],["r"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",16,[[["self"],["f"]],["drainfilter"]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",17,[[["self"]]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable…",17,[[["self"]]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",18,[[["self"]]]],[11,"new","ink_prelude::collections","Creates an empty `BinaryHeap` as a max-heap.",21,[[],["binaryheap"]]],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.…",21,[[["usize"]],["binaryheap"]]],[11,"peek_mut","","Returns a mutable reference to the greatest item in the…",21,[[["self"]],[["option",["peekmut"]],["peekmut"]]]],[11,"pop","","Removes the greatest item from the binary heap and returns…",21,[[["self"]],["option"]]],[11,"push","","Pushes an item onto the binary heap.",21,[[["self"],["t"]]]],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted…",21,[[],["vec"]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",21,[[["binaryheap"],["self"]]]],[11,"drain_sorted","","Returns an iterator which retrieves elements in heap…",21,[[["self"]],["drainsorted"]]],[11,"iter","","Returns an iterator visiting all values in the underlying…",21,[[["self"]],["iter"]]],[11,"into_iter_sorted","","Returns an iterator which retrieves elements in heap…",21,[[],["intoitersorted"]]],[11,"peek","","Returns the greatest item in the binary heap, or `None` if…",21,[[["self"]],[["t"],["option"]]]],[11,"capacity","","Returns the number of elements the binary heap can hold…",21,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",21,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",21,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",21,[[["self"]]]],[11,"shrink_to","","Discards capacity with a lower bound.",21,[[["self"],["usize"]]]],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying…",21,[[],["vec"]]],[11,"len","","Returns the length of the binary heap.",21,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the binary heap is empty.",21,[[["self"]],["bool"]]],[11,"drain","","Clears the binary heap, returning an iterator over the…",21,[[["self"]],["drain"]]],[11,"clear","","Drops all items from the binary heap.",21,[[["self"]]]],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",22,[[],["btreemap"]]],[11,"clear","","Clears the map, removing all elements.",22,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",22,[[["self"],["q"]],[["v"],["option"]]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied…",22,[[["self"],["q"]],["option"]]],[11,"first_key_value","","Returns the first key-value pair in the map. The key in…",22,[[["self"]],["option"]]],[11,"first_entry","","Returns the first entry in the map for in-place…",22,[[["self"]],[["occupiedentry"],["option",["occupiedentry"]]]]],[11,"last_key_value","","Returns the last key-value pair in the map. The key in…",22,[[["self"]],["option"]]],[11,"last_entry","","Returns the last entry in the map for in-place…",22,[[["self"]],[["occupiedentry"],["option",["occupiedentry"]]]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",22,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",22,[[["self"],["q"]],[["v"],["option"]]]],[11,"insert","","Inserts a key-value pair into the map.",22,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",22,[[["self"],["q"]],["option"]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and…",22,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",22,[[["self"],["btreemap"]]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",22,[[["self"],["r"]],["range"]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a…",22,[[["self"],["r"]],["rangemut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",22,[[["self"],["k"]],["entry"]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",22,[[["self"],["q"]],["btreemap"]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",22,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map,…",22,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",22,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map, in order by…",22,[[["self"]],["values"]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in…",22,[[["self"]],["valuesmut"]]],[11,"len","","Returns the number of elements in the map.",22,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",22,[[["self"]],["bool"]]],[11,"new","","Makes a new `BTreeSet` with a reasonable choice of B.",23,[[],["btreeset"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",23,[[["self"],["r"]],["range"]]],[11,"difference","","Visits the values representing the difference, i.e., the…",23,[[["self"],["btreeset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference,…",23,[[["self"],["btreeset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e., the…",23,[[["self"],["btreeset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e., all the…",23,[[["self"],["btreeset"]],["union"]]],[11,"clear","","Clears the set, removing all values.",23,[[["self"]]]],[11,"contains","","Returns `true` if the set contains a value.",23,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that…",23,[[["self"],["q"]],[["t"],["option"]]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with…",23,[[["self"],["btreeset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e.,…",23,[[["self"],["btreeset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e.,…",23,[[["self"],["btreeset"]],["bool"]]],[11,"first","","Returns a reference to the first value in the set, if any.…",23,[[["self"]],[["t"],["option"]]]],[11,"last","","Returns a reference to the last value in the set, if any.…",23,[[["self"]],[["t"],["option"]]]],[11,"pop_first","","Removes the first value from the set and returns it, if…",23,[[["self"]],["option"]]],[11,"pop_last","","Removes the last value from the set and returns it, if…",23,[[["self"]],["option"]]],[11,"insert","","Adds a value to the set.",23,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if…",23,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns whether the value…",23,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is…",23,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",23,[[["btreeset"],["self"]]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",23,[[["self"],["q"]],["btreeset"]]],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet`…",23,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",23,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",23,[[["self"]],["bool"]]],[11,"new","","Creates an empty `LinkedList`.",24,[[],["linkedlist"]]],[11,"append","","Moves all elements from `other` to the end of the list.",24,[[["self"],["linkedlist"]]]],[11,"prepend","","Moves all elements from `other` to the begin of the list.",24,[[["self"],["linkedlist"]]]],[11,"iter","","Provides a forward iterator.",24,[[["self"]],["iter"]]],[11,"iter_mut","","Provides a forward iterator with mutable references.",24,[[["self"]],["itermut"]]],[11,"cursor_front","","Provides a cursor at the front element.",24,[[["self"]],["cursor"]]],[11,"cursor_front_mut","","Provides a cursor with editing operations at the front…",24,[[["self"]],["cursormut"]]],[11,"cursor_back","","Provides a cursor at the back element.",24,[[["self"]],["cursor"]]],[11,"cursor_back_mut","","Provides a cursor with editing operations at the back…",24,[[["self"]],["cursormut"]]],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",24,[[["self"]],["bool"]]],[11,"len","","Returns the length of the `LinkedList`.",24,[[["self"]],["usize"]]],[11,"clear","","Removes all elements from the `LinkedList`.",24,[[["self"]]]],[11,"contains","","Returns `true` if the `LinkedList` contains an element…",24,[[["t"],["self"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if…",24,[[["self"]],[["t"],["option"]]]],[11,"front_mut","","Provides a mutable reference to the front element, or…",24,[[["self"]],[["option"],["t"]]]],[11,"back","","Provides a reference to the back element, or `None` if the…",24,[[["self"]],[["t"],["option"]]]],[11,"back_mut","","Provides a mutable reference to the back element, or…",24,[[["self"]],[["option"],["t"]]]],[11,"push_front","","Adds an element first in the list.",24,[[["self"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the…",24,[[["self"]],["option"]]],[11,"push_back","","Appends an element to the back of a list.",24,[[["self"],["t"]]]],[11,"pop_back","","Removes the last element from a list and returns it, or…",24,[[["self"]],["option"]]],[11,"split_off","","Splits the list into two at the given index. Returns…",24,[[["self"],["usize"]],["linkedlist"]]],[11,"remove","","Removes the element at the given index and returns it.",24,[[["self"],["usize"]],["t"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",24,[[["self"],["f"]],["drainfilter"]]],[11,"new","","Creates an empty `VecDeque`.",25,[[],["vecdeque"]]],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least…",25,[[["usize"]],["vecdeque"]]],[11,"get","","Retrieves an element in the `VecDeque` by index.",25,[[["self"],["usize"]],[["t"],["option"]]]],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",25,[[["self"],["usize"]],[["option"],["t"]]]],[11,"swap","","Swaps elements at indices `i` and `j`.",25,[[["self"],["usize"]]]],[11,"capacity","","Returns the number of elements the `VecDeque` can hold…",25,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",25,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",25,[[["self"],["usize"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",25,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",25,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",25,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the `VecDeque` with a lower bound.",25,[[["self"],["usize"]]]],[11,"truncate","","Shortens the `VecDeque`, keeping the first `len` elements…",25,[[["self"],["usize"]]]],[11,"iter","","Returns a front-to-back iterator.",25,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable…",25,[[["self"]],["itermut"]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the…",25,[[["self"]]]],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the…",25,[[["self"]]]],[11,"len","","Returns the number of elements in the `VecDeque`.",25,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",25,[[["self"]],["bool"]]],[11,"drain","","Creates a draining iterator that removes the specified…",25,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the `VecDeque`, removing all values.",25,[[["self"]]]],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal…",25,[[["t"],["self"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if…",25,[[["self"]],[["t"],["option"]]]],[11,"front_mut","","Provides a mutable reference to the front element, or…",25,[[["self"]],[["option"],["t"]]]],[11,"back","","Provides a reference to the back element, or `None` if the…",25,[[["self"]],[["t"],["option"]]]],[11,"back_mut","","Provides a mutable reference to the back element, or…",25,[[["self"]],[["option"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the…",25,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element from the `VecDeque` and returns…",25,[[["self"]],["option"]]],[11,"push_front","","Prepends an element to the `VecDeque`.",25,[[["self"],["t"]]]],[11,"push_back","","Appends an element to the back of the `VecDeque`.",25,[[["self"],["t"]]]],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and…",25,[[["self"],["usize"]],["option"]]],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and…",25,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an element at `index` within the `VecDeque`,…",25,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at `index` from the…",25,[[["self"],["usize"]],["option"]]],[11,"split_off","","Splits the `VecDeque` into two at the given index.",25,[[["self"],["usize"]],["vecdeque"]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",25,[[["vecdeque"],["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",25,[[["self"],["f"]]]],[11,"resize_with","","Modifies the `VecDeque` in-place so that `len()` is equal…",25,[[["self"],["usize"]]]],[11,"rotate_left","","Rotates the double-ended queue `mid` places to the left.",25,[[["self"],["usize"]]]],[11,"rotate_right","","Rotates the double-ended queue `k` places to the right.",25,[[["self"],["usize"]]]],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal…",25,[[["self"],["usize"],["t"]]]],[11,"cloned","","Map a `Bound<&T>` to a `Bound<T>` by cloning the contents…",5,[[],["bound"]]],[11,"new","","Creates an empty `HashMap`.",26,[[],[["randomstate"],["hashmap",["randomstate"]]]]],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",26,[[["usize"]],[["randomstate"],["hashmap",["randomstate"]]]]],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash…",26,[[["s"]],["hashmap"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity,…",26,[[["s"],["usize"]],["hashmap"]]],[11,"capacity","","Returns the number of elements the map can hold without…",26,[[["self"]],["usize"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",26,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",26,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",26,[[["self"]],["valuesmut"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",26,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",26,[[["self"]],["itermut"]]],[11,"len","","Returns the number of elements in the map.",26,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",26,[[["self"]],["bool"]]],[11,"drain","","Clears the map, returning all key-value pairs as an…",26,[[["self"]],["drain"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the…",26,[[["self"]]]],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",26,[[["self"]],["s"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",26,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",26,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It…",26,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It…",26,[[["self"],["usize"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",26,[[["self"],["k"]],["entry"]]],[11,"get","","Returns a reference to the value corresponding to the key.",26,[[["self"],["q"]],[["v"],["option"]]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied…",26,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",26,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",26,[[["self"],["q"]],[["v"],["option"]]]],[11,"insert","","Inserts a key-value pair into the map.",26,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",26,[[["self"],["q"]],["option"]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and…",26,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",26,[[["self"],["f"]]]],[11,"raw_entry_mut","","Creates a raw entry builder for the HashMap.",26,[[["self"]],["rawentrybuildermut"]]],[11,"raw_entry","","Creates a raw immutable entry builder for the HashMap.",26,[[["self"]],["rawentrybuilder"]]],[11,"from_key","ink_prelude::collections::hash_map","Creates a `RawEntryMut` from the given key.",34,[[["q"]],["rawentrymut"]]],[11,"from_key_hashed_nocheck","","Creates a `RawEntryMut` from the given key and its hash.",34,[[["u64"],["q"]],["rawentrymut"]]],[11,"from_hash","","Creates a `RawEntryMut` from the given hash.",34,[[["u64"],["f"]],["rawentrymut"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",6,[[["k"],["v"]]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",6,[[["f"]]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",6,[[["f"]],["rawentrymut"]]],[11,"key","","Gets a reference to the key in the entry.",35,[[["self"]],["k"]]],[11,"key_mut","","Gets a mutable reference to the key in the entry.",35,[[["self"]],["k"]]],[11,"into_key","","Converts the entry into a mutable reference to the key in…",35,[[],["k"]]],[11,"get","","Gets a reference to the value in the entry.",35,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the…",35,[[],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",35,[[["self"]],["v"]]],[11,"get_key_value","","Gets a reference to the key and value in the entry.",35,[[["self"]]]],[11,"get_key_value_mut","","Gets a mutable reference to the key and value in the entry.",35,[[["self"]]]],[11,"into_key_value","","Converts the OccupiedEntry into a mutable reference to the…",35,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry's old…",35,[[["self"],["v"]],["v"]]],[11,"insert_key","","Sets the value of the entry, and returns the entry's old…",35,[[["self"],["k"]],["k"]]],[11,"remove","","Takes the value out of the entry, and returns it.",35,[[],["v"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",35,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",36,[[["k"],["v"]]]],[11,"insert_hashed_nocheck","","Sets the value of the entry with the VacantEntry's key,…",36,[[["v"],["u64"],["k"]]]],[11,"from_key","","Access an entry by key.",37,[[["q"]],["option"]]],[11,"from_key_hashed_nocheck","","Access an entry by a key and its hash.",37,[[["u64"],["q"]],["option"]]],[11,"from_hash","","Access an entry by hash.",37,[[["u64"],["f"]],["option"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",7,[[["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",7,[[["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",7,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",7,[[["f"]],["entry"]]],[11,"insert","","Sets the value of the entry, and returns an OccupiedEntry.",7,[[["v"]],["occupiedentry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default…",7,[[],["v"]]],[11,"key","","Gets a reference to the key in the entry.",38,[[["self"]],["k"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",38,[[]]],[11,"get","","Gets a reference to the value in the entry.",38,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",38,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the…",38,[[],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old…",38,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it.",38,[[],["v"]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The…",38,[[["v"]]]],[11,"replace_key","","Replaces the key in the hash map with the key used to…",38,[[],["k"]]],[11,"key","","Gets a reference to the key that would be used when…",39,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",39,[[],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",39,[[["v"]],["v"]]],[11,"new","","Constructs a new `RandomState` that is initialized with…",40,[[],["randomstate"]]],[11,"new","","Creates a new `DefaultHasher`.",41,[[],["defaulthasher"]]],[11,"new","ink_prelude::collections","Creates an empty `HashSet`.",42,[[],[["randomstate"],["hashset",["randomstate"]]]]],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",42,[[["usize"]],[["randomstate"],["hashset",["randomstate"]]]]],[11,"capacity","","Returns the number of elements the set can hold without…",42,[[["self"]],["usize"]]],[11,"iter","","An iterator visiting all elements in arbitrary order. The…",42,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",42,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",42,[[["self"]],["bool"]]],[11,"drain","","Clears the set, returning all elements in an iterator.",42,[[["self"]],["drain"]]],[11,"clear","","Clears the set, removing all values.",42,[[["self"]]]],[11,"with_hasher","","Creates a new empty hash set which will use the given…",42,[[["s"]],["hashset"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with the specified capacity,…",42,[[["s"],["usize"]],["hashset"]]],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",42,[[["self"]],["s"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",42,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",42,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It…",42,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It…",42,[[["self"],["usize"]]]],[11,"difference","","Visits the values representing the difference, i.e., the…",42,[[["hashset"],["self"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference,…",42,[[["hashset"],["self"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e., the…",42,[[["hashset"],["self"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e., all the…",42,[[["hashset"],["self"]],["union"]]],[11,"contains","","Returns `true` if the set contains a value.",42,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that…",42,[[["self"],["q"]],[["t"],["option"]]]],[11,"get_or_insert","","Inserts the given `value` into the set if it is not…",42,[[["self"],["t"]],["t"]]],[11,"get_or_insert_owned","","Inserts an owned copy of the given `value` into the set if…",42,[[["self"],["q"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the set if the…",42,[[["self"],["f"],["q"]],["t"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with…",42,[[["self"],["hashset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e.,…",42,[[["self"],["hashset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e.,…",42,[[["self"],["hashset"]],["bool"]]],[11,"insert","","Adds a value to the set.",42,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if…",42,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns whether the value…",42,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is…",42,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",42,[[["self"],["f"]]]],[11,"pop","ink_prelude::collections::binary_heap","Removes the peeked value from the heap and returns it.",50,[[["peekmut"]],["t"]]],[11,"or_insert","ink_prelude::collections::btree_map","Ensures a value is in the entry by inserting the default…",8,[[["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",8,[[["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",8,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",8,[[["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default…",8,[[],["v"]]],[11,"key","","Gets a reference to the key that would be used when…",62,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",62,[[],["k"]]],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key,…",62,[[["v"]],["v"]]],[11,"key","","Gets a reference to the key in the entry.",63,[[["self"]],["k"]]],[11,"remove_entry","","Take ownership of the key and value from the map.",63,[[]]],[11,"get","","Gets a reference to the value in the entry.",63,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",63,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",63,[[],["v"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s…",63,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",63,[[],["v"]]],[11,"insert_next","ink_prelude::collections::linked_list","Inserts the given element just after the element most…",74,[[["self"],["t"]]]],[11,"peek_next","","Provides a reference to the next element, without changing…",74,[[["self"]],[["option"],["t"]]]],[11,"index","","Returns the cursor position index within the `LinkedList`.",76,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",76,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",76,[[["self"]]]],[11,"current","","Returns a reference to the element that the cursor is…",76,[[["self"]],[["option"],["t"]]]],[11,"peek_next","","Returns a reference to the next element.",76,[[["self"]],[["option"],["t"]]]],[11,"peek_prev","","Returns a reference to the previous element.",76,[[["self"]],[["option"],["t"]]]],[11,"index","","Returns the cursor position index within the `LinkedList`.",77,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",77,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",77,[[["self"]]]],[11,"current","","Returns a reference to the element that the cursor is…",77,[[["self"]],[["option"],["t"]]]],[11,"peek_next","","Returns a reference to the next element.",77,[[["self"]],[["option"],["t"]]]],[11,"peek_prev","","Returns a reference to the previous element.",77,[[["self"]],[["option"],["t"]]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",77,[[["self"]],["cursor"]]],[11,"insert_after","","Inserts a new element into the `LinkedList` after the…",77,[[["self"],["t"]]]],[11,"insert_before","","Inserts a new element into the `LinkedList` before the…",77,[[["self"],["t"]]]],[11,"remove_current","","Removes the current element from the `LinkedList`.",77,[[["self"]],["option"]]],[11,"splice_after","","Inserts the elements from the given `LinkedList` after the…",77,[[["self"],["linkedlist"]]]],[11,"splice_before","","Inserts the elements from the given `LinkedList` before…",77,[[["self"],["linkedlist"]]]],[11,"split_after","","Splits the list into two after the current element. This…",77,[[["self"]],["linkedlist"]]],[11,"split_before","","Splits the list into two before the current element. This…",77,[[["self"]],["linkedlist"]]]],"p":[[8,"ToOwned"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[8,"ToString"],[4,"Bound"],[4,"RawEntryMut"],[4,"Entry"],[4,"Entry"],[4,"TryReserveError"],[13,"AllocError"],[3,"Box"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"Drain"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"Splice"],[3,"DrainFilter"],[3,"BinaryHeap"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"LinkedList"],[3,"VecDeque"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"DefaultHasher"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"PeekMut"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIterSorted"],[3,"Drain"],[3,"DrainSorted"],[3,"Keys"],[3,"Iter"],[3,"IntoIter"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"IterMut"],[3,"ValuesMut"],[3,"Iter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"IntoIter"],[3,"Range"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Cursor"],[3,"CursorMut"],[3,"DrainFilter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["ink_primitives"] = {"doc":"Utilities in use by ink!.","i":[[3,"Key","ink_primitives","Typeless generic key into contract storage.",null,null],[12,"0","","",0,null],[3,"KeyDiff","","The difference between two keys.",null,null],[0,"hash","","Hashing utilities around the Keccak256 hasher.",null,null],[3,"Keccak256Hasher","ink_primitives::hash","Keccak256 hasher.",null,null],[5,"keccak256","","Returns the keccak-256 hash for the given byte slice.",null,[[["t"]]]],[11,"finish256","","Returns the hash value for the values written so far.",1,[[]]],[11,"finish64","","",1,[[]]],[11,"as_bytes","ink_primitives","Returns the byte slice of this key.",0,[[["self"]]]],[11,"as_bytes_mut","","Returns the mutable byte slice of this key.",0,[[["self"]]]],[11,"try_to_u32","","Tries to convert the key difference to a `u32` if possible.",2,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"try_to_u64","","Tries to convert the key difference to a `u64` if possible.",2,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"try_to_u128","","Tries to convert the key difference to a `u128` if possible.",2,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",0,[[["w"],["self"]]]],[11,"decode","","",0,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",0,[[],[["result",["error"]],["error"]]]],[11,"meta_type","","",0,[[],["metatype"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","ink_primitives::hash","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["keccak256hasher"]]],[11,"clone","ink_primitives","",0,[[["self"]],["key"]]],[11,"clone","","",2,[[["self"]],["keydiff"]]],[11,"default","ink_primitives::hash","",1,[[],["self"]]],[11,"cmp","ink_primitives","",0,[[["key"],["self"]],["ordering"]]],[11,"cmp","","",2,[[["keydiff"],["self"]],["ordering"]]],[11,"eq","","",0,[[["key"],["self"]],["bool"]]],[11,"ne","","",0,[[["key"],["self"]],["bool"]]],[11,"eq","","",2,[[["keydiff"],["self"]],["bool"]]],[11,"ne","","",2,[[["keydiff"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["key"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["key"],["self"]],["bool"]]],[11,"le","","",0,[[["key"],["self"]],["bool"]]],[11,"gt","","",0,[[["key"],["self"]],["bool"]]],[11,"ge","","",0,[[["key"],["self"]],["bool"]]],[11,"partial_cmp","","",2,[[["keydiff"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",2,[[["keydiff"],["self"]],["bool"]]],[11,"le","","",2,[[["keydiff"],["self"]],["bool"]]],[11,"gt","","",2,[[["keydiff"],["self"]],["bool"]]],[11,"ge","","",2,[[["keydiff"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"sub","","",0,[[],["keydiff"]]],[11,"sub","","",0,[[["u32"]]]],[11,"sub","","",0,[[["u64"]]]],[11,"sub","","",0,[[["u128"]]]],[11,"add","","",0,[[["u32"]]]],[11,"add","","",0,[[["u64"]]]],[11,"add","","",0,[[["u128"]]]],[11,"add_assign","","",0,[[["self"],["u32"]]]],[11,"add_assign","","",0,[[["self"],["u64"]]]],[11,"add_assign","","",0,[[["self"],["u128"]]]],[11,"sub_assign","","",0,[[["self"],["u32"]]]],[11,"sub_assign","","",0,[[["self"],["u64"]]]],[11,"sub_assign","","",0,[[["self"],["u128"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"finish","ink_primitives::hash","Returns the hash value for the values written so far.",1,[[["self"]],["u64"]]],[11,"write","","Writes some data into the hasher.",1,[[["self"]]]],[11,"encode_to","ink_primitives","",0,[[["self"],["encout"]]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",0,[[["fnonce"],["self"]],["r"]]],[11,"decode","","",0,[[["decin"]],[["error"],["result",["error"]]]]],[11,"type_def","","",0,[[],["typedef"]]],[11,"type_id","","",0,[[],["typeid"]]]],"p":[[3,"Key"],[3,"Keccak256Hasher"],[3,"KeyDiff"]]};
searchIndex["type_metadata"] = {"doc":"Efficient and compact serialization of Rust types.","i":[[24,"Metadata","type_metadata","",null,null],[24,"TypeDef","","",null,null],[24,"TypeId","","",null,null],[3,"MetaType","","A metatype abstraction.",null,null],[3,"Registry","","The registry for compaction of type identifiers and…",null,null],[3,"TypeDefStruct","","A Rust struct with named fields.",null,null],[3,"NamedField","","A named field.",null,null],[3,"TypeDefTupleStruct","","A tuple struct with unnamed fields.",null,null],[3,"UnnamedField","","An unnamed field from either a tuple-struct type or a…",null,null],[3,"TypeDefClikeEnum","","A C-like enum type.",null,null],[3,"ClikeEnumVariant","","A C-like enum variant.",null,null],[3,"TypeDefEnum","","A Rust enum, aka tagged union.",null,null],[3,"EnumVariantUnit","","An unit struct enum variant.",null,null],[3,"EnumVariantStruct","","A struct enum variant with named fields.",null,null],[3,"EnumVariantTupleStruct","","A tuple struct enum variant.",null,null],[3,"TypeDefUnion","","A union, aka untagged union, type definition.",null,null],[3,"Namespace","","Represents the namespace of a type definition.",null,null],[3,"TypeIdCustom","","A type identifier for custom type definitions.",null,null],[3,"TypeIdArray","","An array type identifier.",null,null],[12,"len","","The length of the array type definition.",0,null],[12,"type_param","","The element type of the array type definition.",0,null],[3,"TypeIdTuple","","A type identifier to refer to tuple types.",null,null],[12,"type_params","","The types in the tuple type definition.",1,null],[3,"TypeIdSlice","","A type identifier to refer to slice type definitions.",null,null],[4,"TypeDef","","A type definition represents the internal structure of a…",null,null],[13,"Builtin","","A builtin type that has an implied and known internal…",2,null],[13,"Struct","","A struct with named fields.",2,null],[13,"TupleStruct","","A tuple-struct with unnamed fields.",2,null],[13,"ClikeEnum","","A C-like enum with simple named variants.",2,null],[13,"Enum","","A Rust enum with different kinds of variants.",2,null],[13,"Union","","An unsafe Rust union type.",2,null],[4,"Builtin","","This struct just exists for the purpose of better JSON…",null,null],[13,"Builtin","","This enum variant just exists for the purpose of special…",3,null],[4,"EnumVariant","","A Rust enum variant.",null,null],[13,"Unit","","A unit struct variant.",4,null],[13,"Struct","","A struct variant with named fields.",4,null],[13,"TupleStruct","","A tuple-struct variant with unnamed fields.",4,null],[4,"NamespaceError","","An error that may be encountered upon constructing…",null,null],[13,"MissingSegments","","If the module path does not at least have one segment.",5,null],[13,"InvalidIdentifier","","If a segment within a module path is not a proper Rust…",5,null],[12,"segment","type_metadata::NamespaceError","The index of the errorneous segment.",6,null],[4,"TypeId","type_metadata","A type identifier.",null,null],[13,"Custom","","A custom type defined by the user.",7,null],[13,"Slice","","A slice type with runtime known length.",7,null],[13,"Array","","An array type with compile-time known lengh.",7,null],[13,"Tuple","","A tuple type.",7,null],[13,"Primitive","","A Rust primitive type.",7,null],[4,"TypeIdPrimitive","","Identifies a primitive Rust type.",null,null],[13,"Bool","","`bool` type",8,null],[13,"Char","","`char` type",8,null],[13,"Str","","`str` type",8,null],[13,"U8","","`u8`",8,null],[13,"U16","","`u16`",8,null],[13,"U32","","`u32`",8,null],[13,"U64","","`u64`",8,null],[13,"U128","","`u128`",8,null],[13,"I8","","`i8`",8,null],[13,"I16","","`i16`",8,null],[13,"I32","","`i32`",8,null],[13,"I64","","`i64`",8,null],[13,"I128","","`i128`",8,null],[0,"form","","Provides some form definitions.",null,null],[4,"MetaForm","type_metadata::form","A meta meta-type.",null,null],[4,"CompactForm","","Compact form that has its lifetime untracked in…",null,null],[8,"Form","","Trait to control the internal structures of type…",null,null],[16,"String","","The string type.",9,null],[16,"TypeId","","The type identifier type.",9,null],[16,"IndirectTypeId","","A type identifier with indirection.",9,null],[0,"interner","type_metadata","Interning data structure and associated symbol definitions.",null,null],[3,"UntrackedSymbol","type_metadata::interner","A symbol that is not lifetime tracked.",null,null],[3,"Symbol","","A symbol from an interner.",null,null],[3,"Interner","","Interning data structure generic over the element type.",null,null],[11,"into_untracked","","Removes the lifetime tracking for this symbol.",10,[[],["untrackedsymbol"]]],[11,"new","","Creates a new empty interner.",11,[[],["self"]]],[11,"intern_or_get","","Interns the given element or returns its associated symbol…",11,[[["self"],["t"]]]],[11,"get","","Returns the symbol of the given element or `None` if it…",11,[[["t"],["self"]],[["symbol"],["option",["symbol"]]]]],[11,"resolve","","Resolves the original element given its associated symbol…",11,[[["self"],["symbol"]],[["option"],["t"]]]],[11,"new","type_metadata","Creates a new meta type from the given compile-time known…",12,[[],["self"]]],[11,"of","","Creates a new meta types from the type of the given…",12,[[["t"]],["self"]]],[11,"type_id","","Returns the meta type identifier.",12,[[["self"]],[["metaform"],["typeid",["metaform"]]]]],[11,"type_def","","Returns the meta type definition.",12,[[["self"]],[["typedef",["metaform"]],["metaform"]]]],[11,"any_id","","Returns the type identifier provided by `core::any`.",12,[[["self"]],["anytypeid"]]],[11,"new","","Creates a new empty registry.",13,[[],["self"]]],[11,"register_string","","Registeres the given string into the registry and returns…",13,[[["self"],["str"]],[["str"],["untrackedsymbol",["str"]]]]],[11,"register_type","","Registers the given type into the registry and returns its…",13,[[["metatype"],["self"]],[["anytypeid"],["untrackedsymbol",["anytypeid"]]]]],[11,"builtin","","Preferred way to create a builtin type definition.",2,[[],["self"]]],[11,"new","","Creates a new struct definition with named fields.",14,[[["f"]],["self"]]],[11,"new","","Creates a new named field.",15,[[["metatype"]],["self"]]],[11,"of","","Creates a new named field.",15,[[],["self"]]],[11,"new","","Creates a new tuple-struct.",16,[[["f"]],["self"]]],[11,"unit","","Creates the unit tuple-struct that has no fields.",16,[[],["self"]]],[11,"new","","Creates a new unnamed field.",17,[[["metatype"]],["self"]]],[11,"of","","Creates a new unnamed field.",17,[[],["self"]]],[11,"new","","Creates a new C-like enum from the given variants.",18,[[["v"]],["self"]]],[11,"new","","Creates a new C-like enum variant.",19,[[["d"]],["self"]]],[11,"new","","Creates a new Rust enum from the given variants.",20,[[["v"]],["self"]]],[11,"new","","Creates a new unit struct variant.",21,[[["str"]],["self"]]],[11,"new","","Creates a new struct variant from the given fields.",22,[[["f"]],["self"]]],[11,"new","","Creates a new tuple struct enum variant from the given…",23,[[["f"]],["self"]]],[11,"new","","Creates a new union type definition from the given named…",24,[[["f"]],["self"]]],[11,"new","","Creates a new namespace from the given segments.",25,[[["s"]],[["namespaceerror"],["result",["namespaceerror"]]]]],[11,"from_module_path","","Creates a new namespace from the given module path.",25,[[],[["namespaceerror"],["result",["namespaceerror"]]]]],[11,"prelude","","Creates the prelude namespace.",25,[[],["self"]]],[11,"new","","Creates a new type identifier to refer to a custom type…",26,[[["namespace"],["str"],["t"]],["self"]]],[11,"new","","Creates a new identifier to refer to array type definition.",0,[[["u16"],["metatype"]],["self"]]],[11,"new","","Creates a new tuple type definition from the given types.",1,[[["t"]],["self"]]],[11,"unit","","Creates a new unit tuple to represent the unit type, `()`.",1,[[],["self"]]],[11,"new","","Creates a new type identifier to refer to slice type…",27,[[["metatype"]],["self"]]],[11,"of","","Creates a new type identifier to refer to slice type…",27,[[],["self"]]],[8,"IntoCompact","","Compacts the implementor using a registry.",null,null],[16,"Output","","The compact version of `Self`.",28,null],[10,"into_compact","","Compacts `self` by using the registry for caching and…",28,[[["registry"]]]],[8,"HasTypeDef","","Types implementing this trait can communicate their type…",null,null],[10,"type_def","","Returns the type definition for `Self` type.",29,[[],["typedef"]]],[8,"HasTypeId","","Implementors return their meta type identifiers.",null,null],[10,"type_id","","Returns the static type identifier for `Self`.",30,[[],["typeid"]]],[8,"Metadata","","A super trait that shall be implemented by all types…",null,null],[10,"meta_type","","Returns the runtime bridge to the types compile-time type…",31,[[],["metatype"]]],[14,"tuple_meta_type","","Takes a number of types and returns a vector that contains…",null,null],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","type_metadata::form","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","type_metadata::interner","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"into_compact","type_metadata","",2,[[["registry"]]]],[11,"into_compact","","",14,[[["registry"]]]],[11,"into_compact","","",15,[[["registry"]]]],[11,"into_compact","","",16,[[["registry"]]]],[11,"into_compact","","",17,[[["registry"]]]],[11,"into_compact","","",18,[[["registry"]]]],[11,"into_compact","","",19,[[["registry"]]]],[11,"into_compact","","",20,[[["registry"]]]],[11,"into_compact","","",4,[[["registry"]]]],[11,"into_compact","","",21,[[["registry"]]]],[11,"into_compact","","",22,[[["registry"]]]],[11,"into_compact","","",23,[[["registry"]]]],[11,"into_compact","","",24,[[["registry"]]]],[11,"into_compact","","Compacts this namespace using the given registry.",25,[[["registry"]]]],[11,"into_compact","","",7,[[["registry"]]]],[11,"into_compact","","",26,[[["registry"]]]],[11,"into_compact","","",0,[[["registry"]]]],[11,"into_compact","","",1,[[["registry"]]]],[11,"into_compact","","",27,[[["registry"]]]],[11,"from","","",2,[[["builtin"]],["typedef"]]],[11,"from","","",2,[[["typedefstruct"]],["typedef"]]],[11,"from","","",2,[[["typedefclikeenum"]],["typedef"]]],[11,"from","","",2,[[["typedefenum"]],["typedef"]]],[11,"from","","",2,[[["typedefunion"]],["typedef"]]],[11,"from","","",2,[[["typedeftuplestruct"]],["typedef"]]],[11,"from","","",4,[[["enumvariantunit"]],["enumvariant"]]],[11,"from","","",4,[[["enumvariantstruct"]],["enumvariant"]]],[11,"from","","",4,[[["enumvarianttuplestruct"]],["enumvariant"]]],[11,"from","","",7,[[["typeidcustom"]],["typeid"]]],[11,"from","","",7,[[["typeidarray"]],["typeid"]]],[11,"from","","",7,[[["typeidprimitive"]],["typeid"]]],[11,"from","","",7,[[["typeidslice"]],["typeid"]]],[11,"from","","",7,[[["typeidtuple"]],["typeid"]]],[11,"clone","type_metadata::form","",32,[[["self"]],["metaform"]]],[11,"clone","","",33,[[["self"]],["compactform"]]],[11,"clone","type_metadata::interner","",34,[[["self"]],["untrackedsymbol"]]],[11,"clone","","",10,[[["self"]],["symbol"]]],[11,"clone","type_metadata","",12,[[["self"]],["metatype"]]],[11,"clone","","",25,[[["self"]],["namespace"]]],[11,"clone","","",7,[[["self"]],["typeid"]]],[11,"clone","","",8,[[["self"]],["typeidprimitive"]]],[11,"clone","","",26,[[["self"]],["typeidcustom"]]],[11,"clone","","",0,[[["self"]],["typeidarray"]]],[11,"clone","","",1,[[["self"]],["typeidtuple"]]],[11,"clone","","",27,[[["self"]],["typeidslice"]]],[11,"default","type_metadata::interner","",11,[[],["self"]]],[11,"default","type_metadata","",13,[[],["self"]]],[11,"cmp","type_metadata::form","",32,[[["self"],["metaform"]],["ordering"]]],[11,"cmp","","",33,[[["self"],["compactform"]],["ordering"]]],[11,"cmp","type_metadata::interner","",34,[[["untrackedsymbol"],["self"]],["ordering"]]],[11,"cmp","","",10,[[["symbol"],["self"]],["ordering"]]],[11,"cmp","type_metadata","",12,[[["self"]],["ordering"]]],[11,"cmp","","",25,[[["namespace"],["self"]],["ordering"]]],[11,"cmp","","",7,[[["typeid"],["self"]],["ordering"]]],[11,"cmp","","",8,[[["typeidprimitive"],["self"]],["ordering"]]],[11,"cmp","","",26,[[["typeidcustom"],["self"]],["ordering"]]],[11,"cmp","","",0,[[["typeidarray"],["self"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["typeidtuple"]],["ordering"]]],[11,"cmp","","",27,[[["typeidslice"],["self"]],["ordering"]]],[11,"eq","type_metadata::form","",32,[[["self"],["metaform"]],["bool"]]],[11,"eq","","",33,[[["self"],["compactform"]],["bool"]]],[11,"eq","type_metadata::interner","",34,[[["untrackedsymbol"],["self"]],["bool"]]],[11,"ne","","",34,[[["untrackedsymbol"],["self"]],["bool"]]],[11,"eq","","",10,[[["symbol"],["self"]],["bool"]]],[11,"ne","","",10,[[["symbol"],["self"]],["bool"]]],[11,"eq","","",11,[[["interner"],["self"]],["bool"]]],[11,"ne","","",11,[[["interner"],["self"]],["bool"]]],[11,"eq","type_metadata","",12,[[["self"]],["bool"]]],[11,"eq","","",13,[[["registry"],["self"]],["bool"]]],[11,"ne","","",13,[[["registry"],["self"]],["bool"]]],[11,"eq","","",2,[[["typedef"],["self"]],["bool"]]],[11,"ne","","",2,[[["typedef"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["builtin"]],["bool"]]],[11,"eq","","",14,[[["self"],["typedefstruct"]],["bool"]]],[11,"ne","","",14,[[["self"],["typedefstruct"]],["bool"]]],[11,"eq","","",15,[[["namedfield"],["self"]],["bool"]]],[11,"ne","","",15,[[["namedfield"],["self"]],["bool"]]],[11,"eq","","",16,[[["self"],["typedeftuplestruct"]],["bool"]]],[11,"ne","","",16,[[["self"],["typedeftuplestruct"]],["bool"]]],[11,"eq","","",17,[[["self"],["unnamedfield"]],["bool"]]],[11,"ne","","",17,[[["self"],["unnamedfield"]],["bool"]]],[11,"eq","","",18,[[["typedefclikeenum"],["self"]],["bool"]]],[11,"ne","","",18,[[["typedefclikeenum"],["self"]],["bool"]]],[11,"eq","","",19,[[["clikeenumvariant"],["self"]],["bool"]]],[11,"ne","","",19,[[["clikeenumvariant"],["self"]],["bool"]]],[11,"eq","","",20,[[["self"],["typedefenum"]],["bool"]]],[11,"ne","","",20,[[["self"],["typedefenum"]],["bool"]]],[11,"eq","","",4,[[["self"],["enumvariant"]],["bool"]]],[11,"ne","","",4,[[["self"],["enumvariant"]],["bool"]]],[11,"eq","","",21,[[["enumvariantunit"],["self"]],["bool"]]],[11,"ne","","",21,[[["enumvariantunit"],["self"]],["bool"]]],[11,"eq","","",22,[[["enumvariantstruct"],["self"]],["bool"]]],[11,"ne","","",22,[[["enumvariantstruct"],["self"]],["bool"]]],[11,"eq","","",23,[[["self"],["enumvarianttuplestruct"]],["bool"]]],[11,"ne","","",23,[[["self"],["enumvarianttuplestruct"]],["bool"]]],[11,"eq","","",24,[[["self"],["typedefunion"]],["bool"]]],[11,"ne","","",24,[[["self"],["typedefunion"]],["bool"]]],[11,"eq","","",25,[[["namespace"],["self"]],["bool"]]],[11,"ne","","",25,[[["namespace"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["namespaceerror"]],["bool"]]],[11,"ne","","",5,[[["self"],["namespaceerror"]],["bool"]]],[11,"eq","","",7,[[["typeid"],["self"]],["bool"]]],[11,"ne","","",7,[[["typeid"],["self"]],["bool"]]],[11,"eq","","",8,[[["typeidprimitive"],["self"]],["bool"]]],[11,"eq","","",26,[[["typeidcustom"],["self"]],["bool"]]],[11,"ne","","",26,[[["typeidcustom"],["self"]],["bool"]]],[11,"eq","","",0,[[["typeidarray"],["self"]],["bool"]]],[11,"ne","","",0,[[["typeidarray"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["typeidtuple"]],["bool"]]],[11,"ne","","",1,[[["self"],["typeidtuple"]],["bool"]]],[11,"eq","","",27,[[["typeidslice"],["self"]],["bool"]]],[11,"ne","","",27,[[["typeidslice"],["self"]],["bool"]]],[11,"partial_cmp","type_metadata::form","",32,[[["self"],["metaform"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",33,[[["self"],["compactform"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","type_metadata::interner","",34,[[["untrackedsymbol"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",34,[[["untrackedsymbol"],["self"]],["bool"]]],[11,"le","","",34,[[["untrackedsymbol"],["self"]],["bool"]]],[11,"gt","","",34,[[["untrackedsymbol"],["self"]],["bool"]]],[11,"ge","","",34,[[["untrackedsymbol"],["self"]],["bool"]]],[11,"partial_cmp","","",10,[[["symbol"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",10,[[["symbol"],["self"]],["bool"]]],[11,"le","","",10,[[["symbol"],["self"]],["bool"]]],[11,"gt","","",10,[[["symbol"],["self"]],["bool"]]],[11,"ge","","",10,[[["symbol"],["self"]],["bool"]]],[11,"partial_cmp","type_metadata","",12,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",25,[[["namespace"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",25,[[["namespace"],["self"]],["bool"]]],[11,"le","","",25,[[["namespace"],["self"]],["bool"]]],[11,"gt","","",25,[[["namespace"],["self"]],["bool"]]],[11,"ge","","",25,[[["namespace"],["self"]],["bool"]]],[11,"partial_cmp","","",7,[[["typeid"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",7,[[["typeid"],["self"]],["bool"]]],[11,"le","","",7,[[["typeid"],["self"]],["bool"]]],[11,"gt","","",7,[[["typeid"],["self"]],["bool"]]],[11,"ge","","",7,[[["typeid"],["self"]],["bool"]]],[11,"partial_cmp","","",8,[[["typeidprimitive"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",26,[[["typeidcustom"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",26,[[["typeidcustom"],["self"]],["bool"]]],[11,"le","","",26,[[["typeidcustom"],["self"]],["bool"]]],[11,"gt","","",26,[[["typeidcustom"],["self"]],["bool"]]],[11,"ge","","",26,[[["typeidcustom"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["typeidarray"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["typeidarray"],["self"]],["bool"]]],[11,"le","","",0,[[["typeidarray"],["self"]],["bool"]]],[11,"gt","","",0,[[["typeidarray"],["self"]],["bool"]]],[11,"ge","","",0,[[["typeidarray"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["typeidtuple"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["self"],["typeidtuple"]],["bool"]]],[11,"le","","",1,[[["self"],["typeidtuple"]],["bool"]]],[11,"gt","","",1,[[["self"],["typeidtuple"]],["bool"]]],[11,"ge","","",1,[[["self"],["typeidtuple"]],["bool"]]],[11,"partial_cmp","","",27,[[["typeidslice"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",27,[[["typeidslice"],["self"]],["bool"]]],[11,"le","","",27,[[["typeidslice"],["self"]],["bool"]]],[11,"gt","","",27,[[["typeidslice"],["self"]],["bool"]]],[11,"ge","","",27,[[["typeidslice"],["self"]],["bool"]]],[11,"fmt","type_metadata::form","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","type_metadata::interner","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","type_metadata","",12,[[["formatter"],["self"]],[["result",["fmterror"]],["fmterror"]]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"serialize","type_metadata::form","",32,[[["self"],["__s"]],["result"]]],[11,"serialize","","",33,[[["self"],["__s"]],["result"]]],[11,"serialize","type_metadata::interner","",34,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","type_metadata","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","","",17,[[["self"],["__s"]],["result"]]],[11,"serialize","","",18,[[["self"],["__s"]],["result"]]],[11,"serialize","","",19,[[["self"],["__s"]],["result"]]],[11,"serialize","","",20,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",21,[[["self"],["__s"]],["result"]]],[11,"serialize","","",22,[[["self"],["__s"]],["result"]]],[11,"serialize","","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","","",24,[[["self"],["__s"]],["result"]]],[11,"serialize","","",25,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","","",26,[[["self"],["__s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",27,[[["self"],["__s"]],["result"]]]],"p":[[3,"TypeIdArray"],[3,"TypeIdTuple"],[4,"TypeDef"],[4,"Builtin"],[4,"EnumVariant"],[4,"NamespaceError"],[13,"InvalidIdentifier"],[4,"TypeId"],[4,"TypeIdPrimitive"],[8,"Form"],[3,"Symbol"],[3,"Interner"],[3,"MetaType"],[3,"Registry"],[3,"TypeDefStruct"],[3,"NamedField"],[3,"TypeDefTupleStruct"],[3,"UnnamedField"],[3,"TypeDefClikeEnum"],[3,"ClikeEnumVariant"],[3,"TypeDefEnum"],[3,"EnumVariantUnit"],[3,"EnumVariantStruct"],[3,"EnumVariantTupleStruct"],[3,"TypeDefUnion"],[3,"Namespace"],[3,"TypeIdCustom"],[3,"TypeIdSlice"],[8,"IntoCompact"],[8,"HasTypeDef"],[8,"HasTypeId"],[8,"Metadata"],[4,"MetaForm"],[4,"CompactForm"],[3,"UntrackedSymbol"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);