# .gitlab-ci.yml
#
# ink
#
# pipelines can be triggered manually in the web


stages:
  - check
  - workspace
  - examples

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       "3"
  CARGO_HOME:                      "/ci-cache/${CI_PROJECT_NAME}/cargo/${CI_JOB_NAME}"
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  CI_SERVER_NAME:                  "GitLab CI"
  REGISTRY:                        registry.parity.io/parity/infrastructure/scripts
  ALL_CRATES:                      "core alloc prelude utils lang2 lang2/macro"

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/

.docker-env:                       &docker-env
  image:                           ${REGISTRY}/ink-ci-linux:latest
  before_script:
    - cargo -vV
    - rustc -vV
    - rustup show
    - bash --version
    - mkdir -p ${CARGO_HOME}; touch ${CARGO_HOME}/config
    - mkdir -p ${CARGO_TARGET_DIR}
    # global RUSTFLAGS overrides the linker args so this way is better to pass the flags
    - printf '[build]\nrustflags = ["-C", "link-dead-code"]\n' | tee ${CARGO_HOME}/config
    - sccache -s
  only:
    - master
    - /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
    - schedules
    - web
    - /^[0-9]+$/                   # PRs
  dependencies:                    []
  interruptible:                   true
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  tags:
    - linux-docker


#### stage:                        check

publish-docs:
  stage:                           check
  <<:                              *docker-env
  script:
    - echo "__________Set github__________"
    - git config --global user.email "devops-team@parity.io"
    - git config --global user.name "Devops Team Parity"
    # git config remote.origin.url "https://${GITHUB_TOKEN}@github.com/paritytech/wiki.git"
    - echo "__________Generating Docs__________"
    - cargo doc --no-deps --all
    # - git push origin 
    - echo "__________Commit files__________"
    - git checkout -b tst-pages
    - git add -f target/docs/*
    # git add .
    - git commit -m "Update docs to ${CI_COMMIT_REF_NAME}"
    # - git tag -a -f "${SCHEDULE_TAG:-${CI_COMMIT_REF_NAME}}" -m "Update RPC and config docs to ${SCHEDULE_TAG:-${CI_COMMIT_REF_NAME}}"
    - echo "__________Upload files__________"
    # this version of git (2.7.4) will dump the token on failure
    # - git push -q origin HEAD 2>&1 \
    #     sed -r "s|(${GITHUB_USER}):[a-f0-9]+@|\1:REDACTED@|g"
    # - git push -q -f --tags 2>&1 \
    #     sed -r "s|(${GITHUB_USER}):[a-f0-9]+@|\1:REDACTED@|g"
    - git push origin gh-pages # --force

# check-std:
#   stage:                           check
#   <<:                              *docker-env
#   script:
#     - for crate in ${ALL_CRATES}; do
#         cargo check --verbose --all-features --manifest-path ${crate}/Cargo.toml;
#       done

# check-wasm:
#   stage:                           check
#   <<:                              *docker-env
#   script:
#     - for crate in ${ALL_CRATES}; do
#         cargo check --verbose --no-default-features --target wasm32-unknown-unknown --manifest-path ${crate}/Cargo.toml;
#       done


# #### stage:                        workspace

# build-std:
#   stage:                           workspace
#   <<:                              *docker-env
#   needs:
#     - check-std
#   script:
#     - for crate in ${ALL_CRATES}; do
#         cargo build --verbose --all-features --release --manifest-path ${crate}/Cargo.toml;
#       done

# build-wasm:
#   stage:                           workspace
#   <<:                              *docker-env
#   needs:
#     - check-wasm
#   script:
#     - for crate in ${ALL_CRATES}; do
#         cargo build --verbose --no-default-features --release --target wasm32-unknown-unknown --manifest-path ${crate}/Cargo.toml;
#       done

# test:
#   stage:                           workspace
#   <<:                              *docker-env
#   needs:
#     - check-std
#   script:
#     - for crate in ${ALL_CRATES}; do
#         cargo test --verbose --all-features --release --manifest-path ${crate}/Cargo.toml;
#       done

# clippy-std:
#   stage:                           workspace
#   <<:                              *docker-env
#   needs:
#     - check-std
#   script:
#     - for crate in ${ALL_CRATES}; do
#         cargo clippy --verbose --all-features --manifest-path ${crate}/Cargo.toml -- -D warnings;
#       done

# clippy-wasm:
#   stage:                           workspace
#   <<:                              *docker-env
#   needs:
#     - check-wasm
#   script:
#     - for crate in ${ALL_CRATES}; do
#         cargo clippy --verbose --no-default-features --manifest-path ${crate}/Cargo.toml --target wasm32-unknown-unknown -- -D warnings;
#       done

# fmt:
#   stage:                           workspace
#   <<:                              *docker-env
#   script:
#     - cargo fmt --verbose --all -- --check


# #### stage:                        examples

# .update-cargo-contract:            &update-cargo-contract
#   # `cargo install` returns an error if there is nothing to update, so have to supress it here temporarily
#   - cargo install --git https://github.com/paritytech/cargo-contract || echo $?
#   - cargo contract -V

# examples-test:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in examples/lang2/*; do
#         cargo test --verbose --manifest-path ${example}/Cargo.toml;
#       done

# examples-fmt:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in examples/lang2/*; do
#         cargo fmt --verbose --manifest-path ${example}/Cargo.toml -- --check;
#       done

# examples-clippy-std:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in examples/lang2/*; do
#         cargo clippy --verbose --manifest-path ${example}/Cargo.toml -- -D warnings;
#       done

# examples-clippy-wasm:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - for example in examples/lang2/*; do
#         cargo clippy --verbose --manifest-path ${example}/Cargo.toml --no-default-features --target wasm32-unknown-unknown -- -D warnings;
#       done

# examples-contract-build:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - *update-cargo-contract
#     - for example in examples/lang2/*; do
#         pushd $example &&
#         cargo contract build &&
#         popd;
#       done

# examples-generate-metadata:
#   stage:                           examples
#   <<:                              *docker-env
#   script:
#     - *update-cargo-contract
#     - for example in examples/lang2/*; do
#         pushd $example &&
#         cargo contract generate-metadata &&
#         popd;
#       done
