(function() {var implementors = {};
implementors["ink_env"] = [{"text":"impl From&lt;[u8; 4]&gt; for Selector","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;[u8; 32]&gt; for AccountId","synthetic":false,"types":[]},{"text":"impl From&lt;[u8; 32]&gt; for Hash","synthetic":false,"types":[]}];
implementors["ink_lang_codegen"] = [{"text":"impl&lt;'a&gt; From&lt;&amp;'a Contract&gt; for Contract&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Contract&gt; for CrossCallingConflictCfg&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Contract&gt; for CrossCalling&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Contract&gt; for Dispatch&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Contract&gt; for Env&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Contract&gt; for Events&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a InkTest&gt; for InkTest&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Contract&gt; for ItemImpls&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Contract&gt; for Metadata&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Contract&gt; for Storage&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a InkTrait&gt; for TraitDefinition&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["ink_lang_ir"] = [{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for Namespace","synthetic":false,"types":[]},{"text":"impl From&lt;Storage&gt; for InkItem","synthetic":false,"types":[]},{"text":"impl From&lt;Event&gt; for InkItem","synthetic":false,"types":[]},{"text":"impl From&lt;ItemImpl&gt; for InkItem","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Message&gt; for InputsIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Constructor&gt; for InputsIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;[u8; 4]&gt; for Selector","synthetic":false,"types":[]}];
implementors["ink_metadata"] = [{"text":"impl&lt;F:&nbsp;Form&gt; From&lt;EnumLayout&lt;F&gt;&gt; for Layout&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Form&gt; From&lt;CellLayout&lt;F&gt;&gt; for Layout&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Form&gt; From&lt;HashLayout&lt;F&gt;&gt; for Layout&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Form&gt; From&lt;StructLayout&lt;F&gt;&gt; for Layout&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Form&gt; From&lt;ArrayLayout&lt;F&gt;&gt; for Layout&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;[u8; 32]&gt; for LayoutKey","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Key&gt; for LayoutKey","synthetic":false,"types":[]},{"text":"impl From&lt;Key&gt; for LayoutKey","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Form&gt; From&lt;(LayoutKey, &lt;F as Form&gt;::Type)&gt; for CellLayout&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Discriminant","synthetic":false,"types":[]},{"text":"impl From&lt;[u8; 4]&gt; for Selector","synthetic":false,"types":[]}];
implementors["ink_primitives"] = [{"text":"impl From&lt;[u8; 32]&gt; for Key","synthetic":false,"types":[]},{"text":"impl From&lt;Key&gt; for KeyPtr","synthetic":false,"types":[]}];
implementors["ink_storage"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for LazyCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: SpreadLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Lazy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: SpreadLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Memory&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Pack&lt;T&gt;","synthetic":false,"types":[]}];
implementors["scale_info"] = [{"text":"impl From&lt;Registry&gt; for RegistryReadOnly","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Form&gt; From&lt;Vec&lt;Field&lt;T&gt;, Global&gt;&gt; for TypeDefComposite&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Form&gt; From&lt;Vec&lt;Variant&lt;T&gt;, Global&gt;&gt; for TypeDefVariant&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Form&gt; From&lt;(Path&lt;T&gt;, Vec&lt;&lt;T as Form&gt;::Type, Global&gt;, TypeDef&lt;T&gt;)&gt; for Type&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;TypeDefPrimitive&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeDefArray&lt;MetaForm&gt;&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeDefSequence&lt;MetaForm&gt;&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeDefTuple&lt;MetaForm&gt;&gt; for Type","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Form&gt; From&lt;TypeDefArray&lt;T&gt;&gt; for TypeDef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Form&gt; From&lt;TypeDefComposite&lt;T&gt;&gt; for TypeDef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Form&gt; From&lt;TypeDefPrimitive&gt; for TypeDef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Form&gt; From&lt;TypeDefTuple&lt;T&gt;&gt; for TypeDef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Form&gt; From&lt;TypeDefSequence&lt;T&gt;&gt; for TypeDef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Form&gt; From&lt;TypeDefVariant&lt;T&gt;&gt; for TypeDef&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()