(function() {var implementors = {};
implementors["ink_env"] = [{"text":"impl Sync for ReturnFlags","synthetic":true,"types":[]},{"text":"impl Sync for AccountId","synthetic":true,"types":[]},{"text":"impl Sync for Hash","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for DefaultEnvironment","synthetic":true,"types":[]},{"text":"impl&lt;E, Callee, GasLimit, TransferredValue, Args, RetType&gt; Sync for CallBuilder&lt;E, Callee, GasLimit, TransferredValue, Args, RetType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Args: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Callee: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;GasLimit: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;RetType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TransferredValue: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, Args, R&gt; Sync for CallParams&lt;E, Args, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Args: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Environment&gt;::AccountId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Environment&gt;::Balance: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, CodeHash, GasLimit, Endowment, Args, R&gt; Sync for CreateBuilder&lt;E, CodeHash, GasLimit, Endowment, Args, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Args: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Endowment: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;GasLimit: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, Args, R&gt; Sync for CreateParams&lt;E, Args, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Args: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Environment&gt;::Balance: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Environment&gt;::Hash: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Args&gt; Sync for ExecutionInput&lt;Args&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Args: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Selector","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ReturnType&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Unset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Head, Rest&gt; Sync for ArgumentList&lt;Head, Rest&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Head: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rest: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Argument&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ArgumentListEnd","synthetic":true,"types":[]},{"text":"impl Sync for CallData","synthetic":true,"types":[]},{"text":"impl Sync for ChainSpec","synthetic":true,"types":[]},{"text":"impl Sync for EmittedEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DefaultAccounts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Environment&gt;::AccountId: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Sha2x256","synthetic":true,"types":[]},{"text":"impl Sync for Keccak256","synthetic":true,"types":[]},{"text":"impl Sync for Blake2x256","synthetic":true,"types":[]},{"text":"impl Sync for Blake2x128","synthetic":true,"types":[]}];
implementors["ink_lang"] = [{"text":"impl&lt;'a, T&gt; Sync for EnvAccess&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["ink_lang_ir"] = [{"text":"impl&lt;'a, C&gt; !Sync for CallableWithSelector&lt;'a, C&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Config","synthetic":true,"types":[]},{"text":"impl !Sync for Constructor","synthetic":true,"types":[]},{"text":"impl !Sync for Contract","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl !Sync for InkTest","synthetic":true,"types":[]},{"text":"impl !Sync for InkTrait","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for InkTraitConstructor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for InkTraitMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for InputsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMod","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for IterConstructors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for IterEvents&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for IterInkTraitItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for IterItemImpls&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for IterMessages&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Message","synthetic":true,"types":[]},{"text":"impl Sync for Namespace","synthetic":true,"types":[]},{"text":"impl Sync for Selector","synthetic":true,"types":[]},{"text":"impl !Sync for Storage","synthetic":true,"types":[]},{"text":"impl Sync for CallableKind","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItem","synthetic":true,"types":[]},{"text":"impl !Sync for InkItem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for InkTraitItem&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Item","synthetic":true,"types":[]},{"text":"impl Sync for Receiver","synthetic":true,"types":[]},{"text":"impl !Sync for Visibility","synthetic":true,"types":[]}];
implementors["ink_metadata"] = [{"text":"impl&lt;F&gt; Sync for ConstructorSpec&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Selector&gt; Sync for ConstructorSpecBuilder&lt;Selector&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for ContractSpec&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for ContractSpecBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for EventParamSpec&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EventParamSpecBuilder","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for EventSpec&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EventSpecBuilder","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for MessageParamSpec&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MessageParamSpecBuilder","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for MessageSpec&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Selector, Mutates, IsPayable, Returns&gt; Sync for MessageSpecBuilder&lt;Selector, Mutates, IsPayable, Returns&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for ReturnTypeSpec&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Selector","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for TypeSpec&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for InkProject","synthetic":true,"types":[]},{"text":"impl Sync for LayoutKey","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for CellLayout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for HashLayout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HashingStrategy","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for ArrayLayout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for StructLayout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for FieldLayout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Discriminant","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for EnumLayout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Layout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CryptoHasher","synthetic":true,"types":[]}];
implementors["ink_primitives"] = [{"text":"impl Sync for Key","synthetic":true,"types":[]},{"text":"impl Sync for KeyPtr","synthetic":true,"types":[]}];
implementors["ink_storage"] = [{"text":"impl&lt;T&gt; !Sync for Box&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Vec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Lazy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Memory&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Pack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DynamicAllocation","synthetic":true,"types":[]},{"text":"impl Sync for ContractPhase","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for BinaryHeap&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for BitStash","synthetic":true,"types":[]},{"text":"impl !Sync for Bitvec","synthetic":true,"types":[]},{"text":"impl&lt;K, V, H&nbsp;=&nbsp;Blake2x256&gt; !Sync for HashMap&lt;K, V, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; !Sync for SmallVec&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Stash&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Reverse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for PeekMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BitRefMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ChunkRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for BitsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for BitsIterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, H&gt; !Sync for Iter&lt;'a, K, V, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, H&gt; !Sync for IterMut&lt;'a, K, V, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; !Sync for Keys&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, H&gt; !Sync for Values&lt;'a, K, V, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, H&gt; !Sync for ValuesMut&lt;'a, K, V, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Sync for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Sync for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Sync for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N&gt; !Sync for Iter&lt;'a, T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N&gt; !Sync for IterMut&lt;'a, T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for VacantEntry","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Entry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IndexOutOfBounds","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; !Sync for LazyArray&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for LazyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; !Sync for LazyIndexMap&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, H&gt; !Sync for LazyHashMap&lt;K, V, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Sync for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Sync for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Sync for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]}];
implementors["scale_info"] = [{"text":"impl Sync for MetaType","synthetic":true,"types":[]},{"text":"impl Sync for Registry","synthetic":true,"types":[]},{"text":"impl Sync for RegistryReadOnly","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TypeDefComposite&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Field&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Path&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::String: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TypeDefVariant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Variant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Type&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TypeDefArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TypeDefTuple&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TypeDefSequence&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PathError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TypeDef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::String: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Form&gt;::Type: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TypeDefPrimitive","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for TypeBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FieldsBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for VariantsBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for NoFields","synthetic":true,"types":[]},{"text":"impl Sync for NamedFields","synthetic":true,"types":[]},{"text":"impl Sync for UnnamedFields","synthetic":true,"types":[]},{"text":"impl Sync for Fields","synthetic":true,"types":[]},{"text":"impl Sync for NoVariants","synthetic":true,"types":[]},{"text":"impl Sync for VariantFields","synthetic":true,"types":[]},{"text":"impl Sync for Fieldless","synthetic":true,"types":[]},{"text":"impl Sync for Variants","synthetic":true,"types":[]},{"text":"impl Sync for PathNotAssigned","synthetic":true,"types":[]},{"text":"impl Sync for PathAssigned","synthetic":true,"types":[]},{"text":"impl Sync for MetaForm","synthetic":true,"types":[]},{"text":"impl Sync for CompactForm","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UntrackedSymbol&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Symbol&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Interner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()