(function() {var implementors = {};
implementors["ink_env"] = [{"text":"impl&lt;T&gt; Clone for ReturnType&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Set&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Unset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Selector","synthetic":false,"types":[]},{"text":"impl Clone for CallData","synthetic":false,"types":[]},{"text":"impl Clone for EmittedEvent","synthetic":false,"types":[]},{"text":"impl Clone for Sha2x256","synthetic":false,"types":[]},{"text":"impl Clone for Keccak256","synthetic":false,"types":[]},{"text":"impl Clone for Blake2x256","synthetic":false,"types":[]},{"text":"impl Clone for Blake2x128","synthetic":false,"types":[]},{"text":"impl Clone for DefaultEnvironment","synthetic":false,"types":[]},{"text":"impl Clone for AccountId","synthetic":false,"types":[]},{"text":"impl Clone for Hash","synthetic":false,"types":[]}];
implementors["ink_lang"] = [{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for EnvAccess&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["ink_lang_ir"] = [{"text":"impl Clone for Namespace","synthetic":false,"types":[]},{"text":"impl Clone for ExtensionId","synthetic":false,"types":[]},{"text":"impl Clone for CallableKind","synthetic":false,"types":[]},{"text":"impl&lt;C&gt; Clone for CallableWithSelector&lt;'_, C&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for Receiver","synthetic":false,"types":[]},{"text":"impl Clone for Selector","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for InkTraitItem&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for InkTraitConstructor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for InkTraitMessage&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["ink_metadata"] = [{"text":"impl Clone for Discriminant","synthetic":false,"types":[]}];
implementors["ink_primitives"] = [{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for KeyPtr","synthetic":false,"types":[]}];
implementors["ink_storage"] = [{"text":"impl Clone for DynamicAllocation","synthetic":false,"types":[]},{"text":"impl Clone for ContractPhase","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PackedLayout + Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Reverse&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for ChunkRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BitsIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Clone, V:&nbsp;Clone, H:&nbsp;Clone&gt; Clone for Iter&lt;'a, K, V, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Clone, V:&nbsp;Clone, H:&nbsp;Clone&gt; Clone for Values&lt;'a, K, V, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Clone&gt; Clone for Keys&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for Iter&lt;'a, T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PackedLayout,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: LazyArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for VacantEntry","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Memory&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Pack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["scale_info"] = [{"text":"impl Clone for MetaForm","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for PortableForm&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UntrackedSymbol&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Symbol&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for MetaType","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for PortableRegistry&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: FormString,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for TypeDefComposite&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for Field&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::String: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Type: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::String: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for Path&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::String: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for TypeDefVariant&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for Variant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::String: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for Type&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Type: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for TypeDef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TypeDefPrimitive","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for TypeDefArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Type: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for TypeDefTuple&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Type: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for TypeDefSequence&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Type: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Form&gt; Clone for TypeDefPhantom&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Type: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()