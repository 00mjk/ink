(function() {var implementors = {};
implementors["ink_env"] = [{"text":"impl&lt;T&gt; Clone for ReturnType&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Set&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Unset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Selector","synthetic":false,"types":[]},{"text":"impl Clone for CallData","synthetic":false,"types":[]},{"text":"impl Clone for EmittedEvent","synthetic":false,"types":[]},{"text":"impl Clone for Sha2x256","synthetic":false,"types":[]},{"text":"impl Clone for Keccak256","synthetic":false,"types":[]},{"text":"impl Clone for Blake2x256","synthetic":false,"types":[]},{"text":"impl Clone for Blake2x128","synthetic":false,"types":[]},{"text":"impl Clone for DefaultEnvTypes","synthetic":false,"types":[]},{"text":"impl Clone for AccountId","synthetic":false,"types":[]},{"text":"impl Clone for Hash","synthetic":false,"types":[]}];
implementors["ink_lang"] = [{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for EnvAccess&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["ink_metadata"] = [{"text":"impl Clone for Discriminant","synthetic":false,"types":[]}];
implementors["ink_primitives"] = [{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for KeyPtr","synthetic":false,"types":[]}];
implementors["ink_storage"] = [{"text":"impl Clone for DynamicAllocation","synthetic":false,"types":[]},{"text":"impl Clone for ContractPhase","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for ChunkRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BitsIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Clone, V:&nbsp;Clone, H:&nbsp;Clone&gt; Clone for Iter&lt;'a, K, V, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Clone, V:&nbsp;Clone, H:&nbsp;Clone&gt; Clone for Values&lt;'a, K, V, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Clone&gt; Clone for Keys&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for Iter&lt;'a, T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PackedLayout,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: LazyArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for VacantEntry","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PackedLayout,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Memory&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Pack&lt;T&gt;","synthetic":false,"types":[]}];
implementors["scale_info"] = [{"text":"impl Clone for MetaForm","synthetic":false,"types":[]},{"text":"impl Clone for CompactForm","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UntrackedSymbol&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Symbol&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for MetaType","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone + Form&gt; Clone for TypeDefComposite&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone + Form&gt; Clone for Field&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F::TypeId: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone + Form&gt; Clone for TypeDefVariant&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone + Form&gt; Clone for Variant&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone + Form&gt; Clone for Type&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F::TypeId: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone + Form&gt; Clone for TypeDef&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TypeDefPrimitive","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone + Form&gt; Clone for TypeDefArray&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F::TypeId: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone + Form&gt; Clone for TypeDefTuple&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F::TypeId: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone + Form&gt; Clone for TypeDefSequence&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F::TypeId: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()